<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL</title>
      <link href="/2022/12/21/SQL/"/>
      <url>/2022/12/21/SQL/</url>
      
        <content type="html"><![CDATA[<p>本文以mysql为例…</p><h3 id="一、SQL通用语法"><a href="#一、SQL通用语法" class="headerlink" title="一、SQL通用语法"></a>一、SQL通用语法</h3><ol><li>SQL语句可以单行或多行，分号结尾</li><li>MySQL数据库的SQL语句不区分大小写，关键字建议大写</li><li>注释如下（注意<code>--</code> 后面有空格）</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">单行注释： <span class="token comment">-- 注释内容 或 #注释内容（MySQL特有）</span>多行注释： <span class="token comment">/* 注释 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="二、SQL分类"><a href="#二、SQL分类" class="headerlink" title="二、SQL分类"></a>二、SQL分类</h3><ul><li>DDL(Data Definition Language)数据定义语言，用来定义数据库对象：数据库，表，列等</li><li>DML(Data Manipulation Language)数据操作语言，用来对数据库中表的数据进行增删改</li><li>DQL(Data Query Language)数据查询语言，用来查询数据库中表的记录(数据)</li><li>DCL(Data Control Language)数据控制语言，用来定义数据库的访问权限和安全级别，及创建用户</li></ul><p><img src="/2022/12/21/SQL/image-20221221163849483.png" alt="image-20221221163849483"></p><h3 id="三、DDL-操作数据库、表"><a href="#三、DDL-操作数据库、表" class="headerlink" title="三、DDL-操作数据库、表"></a>三、DDL-操作数据库、表</h3><h5 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h5><ol><li><p>查询</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show databases;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建数据库</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create database 数据库名称;create database if not exists 数据库名称;-- 判断否存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除数据库</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop database 数据库名称;drop database if exists 数据库名称;-- 判断是否存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用数据库</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select database();use 数据库名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h5 id="操作数据表"><a href="#操作数据表" class="headerlink" title="操作数据表"></a>操作数据表</h5><ol><li><p>查询当前数据库下所有表名称</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show tables;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询表结构</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">desc 表名称;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建表（注意最后一行末尾，不能加逗号）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table 表名 (字段名1 数据类型1,            字段名2 数据类型2,            ...            字段名n 数据类型n);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop table 表名;drop table if exists 表名;--  判断是否存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改表名</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 rename to 新的表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加一列</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 add 列名 数据类型;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改数据类型</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 modify 列名 新数据类型;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改列名和数据类型</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 change 列名 新列名 新数据类型;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除列</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 drop 列名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><p><code>MySQL</code>数据类型可以分为以下三类：</p><ul><li>数值</li><li>日期</li><li>字符串</li></ul><p><img src="/2022/12/21/SQL/image-20221221172849958.png" alt="image-20221221172849958"></p><p>PS:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">score double(总长度，小数点后保留的位数)score double(5,2)-- 0~100 2（5为3+2）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">name char(10)-- 定长name varchar(10)-- 变长-- 如果将“张三”字符存入两种类型，char占用10个字符空间，varchar占用2个字符空间-- char存储的性能高 浪费空间 varchar存储性能低 节约空间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、DML-增删改数据"><a href="#四、DML-增删改数据" class="headerlink" title="四、DML-增删改数据"></a>四、DML-增删改数据</h3><ol><li><p>给指定列添加数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into 表名(列名1,列名2,...)  values(值1,值2,...);insert into stu(id,name) values(1,&#39;张三&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>给全部列添加数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into 表名 values(值1,值2,...);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>批量添加数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into 表名(列名1,列名2,...)  values(值1,值2,...),(值1,值2,...),(值1,值2,...)...;insert into 表名  values(值1,值2,...),(值1,值2,...),(值1,值2,...)...;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改表数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update 表名 set 列名1&#x3D;值1,列名2&#x3D;值2,... where 条件;-- 修改语句中如果不加where条件，则将所有数据都修改update stu set birthday &#x3D; &#39;1999-12-12&#39;, score &#x3D; 99.99 where name &#x3D; &#39;张三&#39;;-- 案例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">delete from 表名 where 条件;-- 删除语句中如果不加where条件，则将所有数据删除<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="五、DQL-查询表的记录、数据"><a href="#五、DQL-查询表的记录、数据" class="headerlink" title="五、DQL-查询表的记录、数据"></a>五、DQL-查询表的记录、数据</h3><h5 id="查询语法"><a href="#查询语法" class="headerlink" title="查询语法"></a>查询语法</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select字段列表from表名列表where条件列表group by分组字段having分组后条件order by排序字段limit分页限定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h5><ol><li><p>查询多个字段</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 字段列表 from表名;select * from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>去除重复记录</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select distinct 字段列表 from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>起别名</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">as:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL、Navicat安装</title>
      <link href="/2022/12/21/MySQL%E3%80%81Navicat%E5%AE%89%E8%A3%85/"/>
      <url>/2022/12/21/MySQL%E3%80%81Navicat%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="一、下载、解压MySQL安装包"><a href="#一、下载、解压MySQL安装包" class="headerlink" title="一、下载、解压MySQL安装包"></a>一、下载、解压MySQL安装包</h3><p>官网下载地址：<code>https://dev.mysql.com/downloads/mysql/</code></p><p><img src="/2022/12/21/MySQL%E3%80%81Navicat%E5%AE%89%E8%A3%85/image-20221221104431777.png" alt="image-20221221104431777"></p><p>下载完解压到<code>C:\MySQL\mysql-5.7.24-winx64</code></p><p>配置<code>MySQL</code>环境变量，<code>系统变量---&gt;新建----&gt;变量名为MYSQL_HOME</code>,变量值为你的路径名</p><p>我的变量值是：<code>C:\MySQL\mysql-5.7.24-winx64</code></p><p>然后更改Path环境变量，新增量为：<code>%MYSQL_HOME%\bin</code></p><h3 id="二、my-ini文件"><a href="#二、my-ini文件" class="headerlink" title="二、my.ini文件"></a>二、my.ini文件</h3><p>在解压后的根目录新建一个<code>my.ini</code>文件</p><p>文件内容如下</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysql</span><span class="token punctuation">]</span></span><span class="token comment"># 设置mysql客户端默认字符集</span><span class="token key attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span> <span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span><span class="token comment">#设置3306端口</span><span class="token key attr-name">port</span> <span class="token punctuation">=</span> <span class="token value attr-value">3306</span> <span class="token comment"># 设置mysql的安装目录</span><span class="token key attr-name">basedir</span><span class="token punctuation">=</span><span class="token value attr-value">C:\MySQL\mysql-5.7.24-winx64</span><span class="token comment"># 设置mysql数据库的数据的存放目录</span><span class="token key attr-name">datadir</span><span class="token punctuation">=</span><span class="token value attr-value">C:\MySQL\mysql-5.7.24-winx64\data</span><span class="token comment"># 允许最大连接数</span><span class="token key attr-name">max_connections</span><span class="token punctuation">=</span><span class="token value attr-value">200</span><span class="token comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><span class="token key attr-name">character-set-server</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span><span class="token comment"># 创建新表时将使用的默认存储引擎</span><span class="token key attr-name">default-storage-engine</span><span class="token punctuation">=</span><span class="token value attr-value">INNODB</span>skip-grant-tables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、安装MySQL服务及初始化"><a href="#三、安装MySQL服务及初始化" class="headerlink" title="三、安装MySQL服务及初始化"></a>三、安装MySQL服务及初始化</h3><p>以管理员身份运行<code>cmd</code>分别执行以下命令</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">mysqld installmysqld --initializenet start mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="四、登录MySQL、修改密码"><a href="#四、登录MySQL、修改密码" class="headerlink" title="四、登录MySQL、修改密码"></a>四、登录MySQL、修改密码</h3><p>执行<code>mysql -u root -p</code>后提示输入密码</p><p>直接回车，因为刚刚的<code>my.ini</code>最后一行的意思就是跳过密码直接登录</p><p>输入以下命令修改密码</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update mysql.user set authentication_string&#x3D;password(&#39;123456&#39;) where user&#x3D;&#39;root&#39; ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到此<code>MySQL</code>就安装完毕了…</p><p>第一次登入可能需要修改一次密码</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter user ‘root’@‘loaclhost’ identified by ‘654321’;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外，退出命令如下</p><pre class="line-numbers language-none"><code class="language-none">exitquit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="五、安装Navicat"><a href="#五、安装Navicat" class="headerlink" title="五、安装Navicat"></a>五、安装Navicat</h3><p>参考<a href="https://blog.csdn.net/weixin_35724834/article/details/90052994?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167168388916800182766279%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167168388916800182766279&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-90052994-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_control2&utm_term=navicat%20premium12%E7%A0%B4%E8%A7%A3&spm=1018.2226.3001.4187">Navicat Premium 12安装教程</a>…</p>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象编程（高级部分）笔记</title>
      <link href="/2022/11/13/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%EF%BC%89%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/11/13/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%EF%BC%89%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>边学边记…</p><p>具体要学习的知识如下</p><ul><li>类变量和类方法</li><li>理解main方法语法</li><li>代码块</li><li>单例设计模式</li><li>final关键字</li><li>抽象类</li><li>接口</li><li>内部类</li></ul><h3 id="一、类变量"><a href="#一、类变量" class="headerlink" title="一、类变量"></a>一、类变量</h3><h5 id="什么是类变量"><a href="#什么是类变量" class="headerlink" title="什么是类变量"></a>什么是类变量</h5><p>类变量也叫静态变量&#x2F;静态属性，是该类的所有对象共享的变量，任何一个该类的对象去访问它时，取到的都是相同的值，同样任何一个该类的对象去修改它时，修改的也是同一个变量。</p><p>…</p><p>下面来看一段代码</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class Child&#123;    private String name;    public static int count&#x3D;0;&#x2F;&#x2F;定义一个变量count，是一个类变量（静态变量），被Child类的所有对象实例共享    public Child(String name) &#123;        this.name &#x3D; name;    &#125;    public void join()&#123;        System.out.println(name+&quot; 加入了游戏..&quot;);        count++;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态域因<code>jdk</code>版本不同，可能存放在堆里，也有可能在方法区里</p><p>但可以肯定的是，静态变量被所有对象共享，而且在类加载的时候就生成了（new的时候加载一次，且只加载一次）</p><p>关于上面代码里的<code>count</code>变量，也就是<code>static</code>变量</p><p>在<code>jdk8</code>以前，会认为是在这个方法区里面，但<code>jdk8</code>以后静态域放在了堆里面</p><p>当类被加载的时候，会在堆里生成一个<code>class</code>对象，而<code>static</code>变量就被保存在<code>class</code>实例的尾部，所以认为静态变量在堆里面</p><p>这里顺便提一句，局部变量在使用完之后内存会被释放，但静态变量会保留内存，直到程序结束</p><h5 id="访问类变量"><a href="#访问类变量" class="headerlink" title="访问类变量"></a>访问类变量</h5><ul><li>类名.类变量名</li><li>对象名.类变量名</li></ul><p>这里更推荐使用前者，看起来更规范一些</p><p>而实例变量不能通过前者访问</p><p>因为类变量随着类的加载而创建，所以没有创建对象实例也可访问类变量</p><p>因此，类变量的生命周期是随类的加载开始，随着类消亡而销毁</p><p>同时，类变量的访问也要遵守修饰符的访问权限，和普通属性是一样的</p><h5 id="什么时候需要用类变量"><a href="#什么时候需要用类变量" class="headerlink" title="什么时候需要用类变量"></a>什么时候需要用类变量</h5><p>当我们需要让某个类的所有对象都共享一个变量时，就可以考虑使用类变量</p><p>例如：定义学生类，统计所有学生共交多少钱</p><h5 id="类变量与实例变量（普通变量）的区别"><a href="#类变量与实例变量（普通变量）的区别" class="headerlink" title="类变量与实例变量（普通变量）的区别"></a>类变量与实例变量（普通变量）的区别</h5><p>类变量是该类的所有对象共享的，而实例变量是每个对象独享的</p><p>加上<code>static</code>的变量称为类变量或静态变量，否则称为实例变量&#x2F;普通变量&#x2F;非静态变量</p><p>类变量就先记录这么多吧…</p><h3 id="二、类方法"><a href="#二、类方法" class="headerlink" title="二、类方法"></a>二、类方法</h3><p>类方法也叫静态方法</p><p>当方法使用了<code>static</code>修饰后，该方法就是静态方法，静态方法就可以访问静态属性&#x2F;变量</p><p>静态方法不能调用非静态变量</p><p>形式如下：</p><ul><li>访问修饰符 static 数据返回类型 方法名(){}</li><li>static 访问修饰符 数据返回类型 方法(){}</li></ul><p>这里也是为了规范，推荐使用前者</p><h5 id="类方法的调用"><a href="#类方法的调用" class="headerlink" title="类方法的调用"></a>类方法的调用</h5><ul><li>类名.类方法名</li><li>对象名.类方法名</li></ul><p>跟前面的类变量一样，要满足访问修饰符的访问权限和范围</p><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p>我们可以发现在工具类中提供的方法基本都是静态方法</p><p>当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法，提高开发效率。</p><p>在开放中往往将一些通用的方法，设计成静态方法，这样我们不需要创建对象就可以使用了，比如打印一维数组，冒泡排序，完成某个计算任务等…</p><p>如果我们希望不创建实例，也可以调用某个方法，这时候静态方法就是一个很好的使用场景</p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>类方法也和类变量一致，随着类的加载而加载，将结构信息存储在方法区</li><li>类方法中无<code>this</code>的参数，而普通方法中隐含着<code>this</code>的参数</li><li>类方法可以通过类名调用，也可以通过对象名调用，不能通过类名调用</li><li>类方法中不允许使用和对象有关的关键字，比如<code>this</code>和<code>super</code>。但普通方法可以使用</li><li>类方法（静态方法）中只能访问静态变量和静态方法，但普通方法即可以访问普通变量和方法，也可以访问静态变量和方法（但必须遵守访问权限）</li></ul><h3 id="三、理解main方法语法"><a href="#三、理解main方法语法" class="headerlink" title="三、理解main方法语法"></a>三、理解main方法语法</h3><h5 id="深入理解main方法"><a href="#深入理解main方法" class="headerlink" title="深入理解main方法"></a>深入理解main方法</h5><p>解释<code>main</code>方法的形式</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static void main(String[] args) &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><code>main</code>方法时虚拟机调用的</li><li>Java虚拟机需要调用类的<code>main()</code>方法，所以该方法的访问权限必须是<code>public</code></li><li>Java虚拟机在执行<code>main()</code>方法时不必创建对象，所以该方法必须是<code>static</code></li><li>该方法接收<code>String</code>类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数</li><li>main的形参，就是把<code>Java 运行的类名 参数1 参数2 参数3</code>中最后面的参数形成一个数组带进去，而且可以在主方法里再取出来</li></ol><p>同上面的类方法，在<code>main()</code>方法中，我们可以直接调用<code>main()</code>方法所在类的静态方法或静态属性，但是，不能直接访问该类的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员</p><h5 id="main动态传值"><a href="#main动态传值" class="headerlink" title="main动态传值"></a>main动态传值</h5><p>刚刚上面讲的<code>Java 运行的类名 参数1 参数2 参数3</code>是在命令行中的传值方法</p><p>下面我们用下面这段代码来说一下idea里怎么进行传递参数</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Main &#123;    public static void main(String[] args) &#123;        for (int i&#x3D;0;i&lt; args.length;i++)&#123;            System.out.println(&quot;args[&quot;+i+&quot;]&#x3D;&quot;+args[i]);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在idea右上角选择<code>Edit Configurations</code></p><p><img src="/2022/11/13/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%EF%BC%89%E7%AC%94%E8%AE%B0/image-20221112150649553.png" alt="image-20221112150649553"></p><p>在<code>Program arguments</code>里写入参数即可</p><p><img src="/2022/11/13/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%EF%BC%89%E7%AC%94%E8%AE%B0/image-20221112150845084.png" alt="image-20221112150845084"></p><p>如图，这里我们传入<code>杭州 宁波 温州</code>看看效果</p><p><img src="/2022/11/13/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%EF%BC%89%E7%AC%94%E8%AE%B0/image-20221112151018475.png" alt="image-20221112151018475"></p><p>运行后可以看到我们成功传入了参数</p><p><img src="/2022/11/13/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%EF%BC%89%E7%AC%94%E8%AE%B0/image-20221112151111789.png" alt="image-20221112151111789"></p><p>main方法就到这…</p><h3 id="四、代码块"><a href="#四、代码块" class="headerlink" title="四、代码块"></a>四、代码块</h3><h5 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h5><p>代码块又称为初始化块，属于类中的成员[即 是类的一部分]，类似于方法，将逻辑语句封装在方法体中，通过<code>&#123;&#125;</code>包围起来。</p><p>但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显式调用，而是加载类时，或创建对象时隐式调用。</p><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">[修饰符]&#123;代码&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>语法说明：</p><ol><li>修饰符可选，要写的话，也只能写<code>static</code></li><li>代码块分为两类，使用<code>static</code>修饰的叫静态代码块，没有<code>static</code>修饰的，叫普通代码块</li><li>逻辑语句可以为任何逻辑语句（输入、输出、方法调用、循环、判断等）</li><li><code>;</code>号可以写上，也可以省略</li></ol><p>代码块的好处：</p><ol><li>相当于另外一种形式的构造器（对构造器的补充机制），可以做初始化的操作，顺序优先于构造器</li><li>如果多个构造器中都有重复的语句，可以抽取到初始化块中，提高代码的重用性</li></ol><h5 id="细节（重点）"><a href="#细节（重点）" class="headerlink" title="细节（重点）"></a>细节（重点）</h5><ol><li><p>static代码块也叫静态代码块，作用就是对类进行初始化，而且它随着类的加载而执行，并且只会执行一次。如果是普通代码块，每创建一个对象，就执行。</p></li><li><p>类什么时候被加载</p><p>①创建对象实例时（new）</p><p>②创建子类对象实例，父类也会被加载</p><p>③使用类的静态成员时（静态属性、静态方法）</p></li><li><p>普通的代码块，在创建对象实例时，会被隐式的调用。被创建一次，就会调用一次。如果只是使用类的静态成员时，普通代码块并不会执行</p></li><li><p>静态代码块和静态属性初始化的优先级一样，按他们定义的顺序调用，普通代码块和普通属性初始化的优先级也一样，但是会先调用静态，其次按他们定义的顺序调用，最后调用构造器，总结一下就是静态&gt;普通&gt;构造器</p></li><li><p>构造器的最前面其实隐含了super()和调用普通代码块（先父类按顺序，再子类按顺序）</p></li><li><p>调用顺序</p><p>①父类的静态代码块和静态属性（优先级一样，按定义顺序执行）</p><p>②子类的静态代码块和静态属性（优先级一样，按定义顺序执行）</p><p>③父类的普通代码块和普通属性初始化（优先级一样，按定义顺序执行）</p><p>④父类的构造方法</p><p>⑤子类的普通代码块和普通属性初始化（优先级一样，按定义顺序执行）</p><p>⑥子类的构造方法</p></li><li><p>静态代码块只能直接调用静态成员（静态属性和静态方法），普通代码块可以调用任意成员</p></li></ol><h3 id="五、单例设计模式"><a href="#五、单例设计模式" class="headerlink" title="五、单例设计模式"></a>五、单例设计模式</h3><h5 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h5><ol><li>静态方法和属性的经典使用</li><li>设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格、以及解决问题的思考方式</li></ol><h5 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h5><ol><li><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法</p></li><li><p>单例模式有两种方式：</p><p>①饿汉式</p><p>②懒汉式</p></li></ol><h5 id="单例模式应用实例-饿汉式"><a href="#单例模式应用实例-饿汉式" class="headerlink" title="单例模式应用实例-饿汉式"></a>单例模式应用实例-饿汉式</h5><p>实现步骤</p><ol><li>构造器私有化&#x3D;&#x3D;&gt;防止直接<code>new</code></li><li>类的内部创建静态对象</li><li>向外暴露一个静态的公共方法 <code>getInstance</code></li><li>代码实现</li></ol><p>这里解释一下，之所以要将<code>getInstance</code>方法设置为静态方法，是因为避免去new一个对象，那又因为要让<code>getInstance</code>这个静态方法能够使用到类内部创建的对象，所以需要将对象设置为静态的</p><p>下面看一下具体的代码</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class SingleTon01 &#123;    public static void main(String[] args) &#123;        GirlFriend instance &#x3D; GirlFriend.getInstance();        System.out.println(instance);        GirlFriend instance2 &#x3D; GirlFriend.getInstance();        System.out.println(instance2);        if (instance&#x3D;&#x3D;instance2)&#123;&#x2F;&#x2F;可以看到两次获取到的都是同一对象            System.out.println(&quot;true&quot;);        &#125;    &#125;&#125;class GirlFriend&#123;    private String name;    private static GirlFriend tank&#x3D;new GirlFriend(&quot;Tank&quot;);&#x2F;&#x2F;类的内部创建静态对象    private GirlFriend(String name) &#123;&#x2F;&#x2F;构造器私有化        this.name &#x3D; name;    &#125;    public static GirlFriend getInstance()&#123;&#x2F;&#x2F;向外暴露一个静态的公共方法        return tank;    &#125;    @Override    public String toString() &#123;        return &quot;GirlFriend&#123;&quot; +                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h5><p>为什么叫饿汉式？</p><p>因为不管你有没有使用这个对象，它都已经帮你创建好了一个对象，所以叫饿汉式…相反，不去用它，它就不会创建，被称为懒汉式…</p><h5 id="单例模式应用实例-懒汉式"><a href="#单例模式应用实例-懒汉式" class="headerlink" title="单例模式应用实例-懒汉式"></a>单例模式应用实例-懒汉式</h5><p>饿汉式不使用对象却也会创建对象，造成了一种资源的浪费，而懒汉式就解决了这一个问题</p><p>实现步骤</p><ol><li>仍然构造器私有化</li><li>定义一个<code>static</code>静态属性对象</li><li>提供一个<code>public</code>的<code>static</code>方法，可以返回一个Cat对象</li><li>懒汉式，只有当用户使用<code>getInstance</code>时，才返回cat对象，从而再次调用时，会返回上次创建的Cat对象</li></ol><p>从而保证了单例</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class SingleTon02 &#123;    public static void main(String[] args) &#123;        System.out.println(Cat.n1);        Cat instance&#x3D;Cat.getInstance();        System.out.println(instance);        Cat instance2&#x3D;Cat.getInstance();        System.out.println(instance);    &#125;&#125;class Cat&#123;    private String name;    public static int n1&#x3D;999;    private static Cat cat;    private Cat(String name) &#123;        System.out.println(&quot;构造器被调用...&quot;);        this.name &#x3D; name;    &#125;    public static Cat getInstance()&#123;        if (cat&#x3D;&#x3D;null)&#123;&#x2F;&#x2F;如果对象还未创建，则创建一个            cat&#x3D;new Cat(&quot;小可爱&quot;);        &#125;        return cat;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="总结单例设计模式"><a href="#总结单例设计模式" class="headerlink" title="总结单例设计模式"></a>总结单例设计模式</h5><p>饿汉式VS懒汉式</p><ol><li>最主要的区别就是创建的时机不同，饿汉式在类加载就创建了对象实例，而懒汉式是在使用时才创建</li><li>饿汉式不存在线程安全问题，懒汉式存在线程安全问题（后续介绍）</li><li>饿汉式存在浪费资源的可能</li><li>在<code>javaSE</code>标准类中，<code>java.lang.Runtime</code>就是经典的单例模式</li></ol><h3 id="六、final关键字"><a href="#六、final关键字" class="headerlink" title="六、final关键字"></a>六、final关键字</h3><h5 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h5><p>final可以修饰类、属性、方法和局部变量</p><h5 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h5><ol><li><p>当不希望类被继承时，可以用<code>final</code>修饰</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">final class A&#123;&#125;&#x2F;&#x2F;在不想被继承的类前加finalclass B extends A&#123;&#125;&#x2F;&#x2F;此处会报错，无法继承A类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>当不希望父类的某个方法被子类覆盖&#x2F;重写时，可以用<code>final</code>关键字修饰</p><p>具体格式为<code>访问修饰符 final 返回类型 方法名</code></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class C &#123;    public final void hi()&#123;&#125;&#x2F;&#x2F;这里使用final修饰方法&#125;class D extends C&#123;    @Override    public void hi() &#123;&#x2F;&#x2F;此处会报错，只能继承但不能重写C类的hi方法        System.out.println(&quot;重写C类的hi方法&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当不希望类的某个属性的值被修改，可以使用<code>final</code>修饰</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Final01 &#123;    public static void main(String[] args) &#123;        E e &#x3D; new E();        e.n1&#x3D;888;&#x2F;&#x2F;报错，无法修改    &#125;&#125;class E&#123;    public final int n1&#x3D;999;&#x2F;&#x2F;这里用final修饰变量&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当不希望某个局部变量被修改，可以用<code>final</code>修饰</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class F&#123;    public void cry()&#123;        final double Num&#x3D;0.01;&#x2F;&#x2F;finall修饰局部变量        Num&#x3D;0.9;&#x2F;&#x2F;报错，无法修改        System.out.println(&quot;Num&#x3D; &quot;+Num);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ol><li><p><code>final</code>修饰的属性又叫常量，一般用 <code>XX_XX_XX</code>来命名</p></li><li><p><code>final</code>修饰的属性在定义时，必须赋初值，并且以后不能再修改，赋值可以在如下位置之一</p><p>①定义时：如<code>public final double TAX_RATE=0.08;</code></p><p>②在构造器中</p><p>③在代码块中</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public final double TAX_RATE&#x3D;0.01;&#x2F;&#x2F;第一种public final double TAX_RATE2;&#x2F;&#x2F;第二种public final double TAX_RATE3;&#x2F;&#x2F;第三种public AA()&#123;&#x2F;&#x2F;第二种：在构造器中赋初值    TAX_RATE2&#x3D;1.1;&#125;&#123;&#x2F;&#x2F;第三种：在代码块中赋初值    TAX_RATE3&#x3D;2.2;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果<code>final</code>修饰的属性是静态的，则初始化的位置只能是</p><p>①定义时</p><p>②在静态代码块，不能再构造器中赋值</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static final double TAX_RATE&#x3D;0.01;public static final double TAX_RATE2;&#x2F;&#x2F;报错public static final double TAX_RATE3;public BB()&#123;    TAX_RATE2&#x3D;1.1;&#x2F;&#x2F;构造器不能赋值（静态）&#125;static &#123;    TAX_RATE3&#x3D;2.2;&#x2F;&#x2F;静态代码块可以赋值&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>final</code>类不能继承，但是可以实例化对象</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class FinalDetail01 &#123;    public static void main(String[] args) &#123;        CC cc &#x3D; new CC();&#x2F;&#x2F;实例化对象不会报错    &#125;&#125;final class CC&#123;&#125;&#x2F;&#x2F;final类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果类不是final类，但是含有<code>final</code>方法，则该方法虽然不能重写，但是可以被继承</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class FinalDetail01 &#123;    public static void main(String[] args) &#123;        new EE().cal();&#x2F;&#x2F;可以正常调用    &#125;&#125;class DD&#123;    public final void cal()&#123;&#x2F;&#x2F;此处含有final方法        System.out.println(&quot;cal()方法&quot;);    &#125;&#125;class EE extends DD&#123;&#125;&#x2F;&#x2F;可以继承DD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一般来说，如果一个类已经是final类了，就没有必要再将方法修饰成final方法</p></li><li><p>final不能修饰构造方法（即构造器）</p></li><li><p>final和static往往搭配使用，效率更高，不会导致类加载，底层编译器做了优化处理</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static void main(String[] args) &#123;        System.out.println(BBB.num);&#x2F;&#x2F;输出999和BBB被执行&#125;class BBB&#123;    public static int num&#x3D;999;    static&#123;        System.out.println(&quot;BBB 的静态代码块被执行&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static void main(String[] args) &#123;    System.out.println(BBB.num);&#x2F;&#x2F;仅输出999&#125;class BBB&#123;    public final static int num&#x3D;999;    static&#123;        System.out.println(&quot;BBB 的静态代码块被执行&quot;);&#x2F;&#x2F;此句不输出    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>包装类（Integer，Double，Float，Boolean等都是final），String也是final类</p></li></ol><h3 id="七、抽象类"><a href="#七、抽象类" class="headerlink" title="七、抽象类"></a>七、抽象类</h3><h5 id="引入抽象类"><a href="#引入抽象类" class="headerlink" title="引入抽象类"></a>引入抽象类</h5><p>当父类的某些方法，需要声明，但是又不确定如何实现时，可以用<code>abstract</code>关键字来修饰方法，将其声明为抽象方法，那么这个类就是抽象类</p><h5 id="具体写法"><a href="#具体写法" class="headerlink" title="具体写法"></a>具体写法</h5><p>这里要注意，如果要将方法设为抽象方法，那么需要在类的前面也加上<code>abstract</code>，否则会报错，同时抽象方法没有方法体，否则会报错</p><p>具体格式为<code>访问修饰符 abstract 返回类型 方法名(参数列表);</code></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">abstract class Animal&#123;&#x2F;&#x2F;类的前面加上abstract    private String name;    public Animal(String name) &#123;        this.name &#x3D; name;    &#125;    public abstract void eat();&#x2F;&#x2F;抽象方法&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而且，抽象类一般来说会被继承，由其子类来实现抽象方法</p><h5 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h5><ol><li><p>抽象类不能被实例化</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Abstract02 &#123;    public static void main(String[] args) &#123;        new A();&#x2F;&#x2F;此处报错，不能实例化抽象类    &#125;&#125;abstract class A&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>抽象类不一定要包含<code>abstract</code>方法，换句话说，抽象类可以没有<code>abstract</code>方法，还可以有实现的方法</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">abstract class A&#123;&#125;&#x2F;&#x2F;用上面的代码来举例，此处并不会报错<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">abstract class A&#123;public void hi()&#123;System.out.println(&quot;hi&quot;);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一旦类包含了<code>abstract</code>方法，则这个类必须声明为<code>abstract</code></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class B&#123;    public abstract void hi();&#x2F;&#x2F;报错，因为包含了抽象方法，所以必须是抽象类&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>abstract</code>只能修饰类和方法，不能修饰属性和其他</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class C&#123;    public abstract int a;&#x2F;&#x2F;报错，abstract只能修饰类和方法&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>抽象类可以有任意成员【抽象类本质还是类】，比如：非抽象方法、构造器、静态属性等等</p></li><li><p>抽象方法不能有主体，即不能实现（也就是开头所说的不能有方法体）</p></li><li><p>如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为<code>abstract</code>类</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">abstract class E&#123;    public abstract void hi();&#125;class F extends E&#123;&#125;&#x2F;&#x2F;这里继承了E抽象类，但没有实现所有的抽象方法，所以会报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">abstract class E&#123;    public abstract void hi();&#125;abstract class F extends E&#123;&#125;&#x2F;&#x2F;那么我们在子类前加上abstract就不会报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">abstract class E&#123;    public abstract void hi();&#125;class G extends E&#123;    @Override    public void hi() &#123;&#125;&#x2F;&#x2F;所谓实现方法，就是要有方法体（空也可以）&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>抽象方法不能用private、final、static来修饰，因为这些关键字都是和重写相违背的</p></li></ol><h5 id="抽象模板设计"><a href="#抽象模板设计" class="headerlink" title="抽象模板设计"></a>抽象模板设计</h5><p>首先我们来看下面一段代码（分别在三个文件中）</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class TestTemplate &#123;    public static void main(String[] args) &#123;        AA aa &#x3D; new AA();        aa.job();        BB bb &#x3D; new BB();        bb.job();    &#125;&#125;public class AA &#123;    public void job()&#123;        long start&#x3D;System.currentTimeMillis();        long num&#x3D;0;        for (long i&#x3D;1;i&lt;&#x3D;800000;i++)&#123;            num+&#x3D;i;        &#125;        long end&#x3D;System.currentTimeMillis();        System.out.println(&quot;执行时间：&quot;+(end-start));    &#125;&#125;public class BB &#123;    public void job()&#123;        long start&#x3D;System.currentTimeMillis();        long num&#x3D;0;        for (long i&#x3D;1;i&lt;&#x3D;80000;i++)&#123;            num*&#x3D;i;        &#125;        long end&#x3D;System.currentTimeMillis();        System.out.println(&quot;执行时间：&quot;+(end-start));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里提一句，<code>currentTimeMillis()</code>可以以毫秒为单位获取系统当前的时间，返回<code>long</code>数据类型的数据</p><p>我们发现，AA类和BB类有相当一部分是重复的，下面进行改进，体会一下抽象模板设计</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class TestTemplate &#123;    public static void main(String[] args) &#123;        AA aa &#x3D; new AA();        aa.calculateTime();        BB bb &#x3D; new BB();        bb.calculateTime();    &#125;&#125;abstract public class Template &#123;    public abstract void job();    public void calculateTime()&#123;        long start&#x3D;System.currentTimeMillis();        job();&#x2F;&#x2F;动态机制绑定到AA或BB的job执行        long end&#x3D;System.currentTimeMillis();        System.out.println(&quot;任务执行时间：&quot;+(end-start));    &#125;&#125;public class AA extends Template&#123;    public void job()&#123;&#x2F;&#x2F;重写抽象类里的job        long num&#x3D;0;        for (long i&#x3D;1;i&lt;&#x3D;800000;i++)&#123;            num+&#x3D;i;        &#125;    &#125;&#125;public class BB extends Template &#123;    public void job()&#123;&#x2F;&#x2F;&#x2F;&#x2F;重写抽象类里的job        long num&#x3D;0;        for (long i&#x3D;1;i&lt;&#x3D;80000;i++)&#123;            num*&#x3D;i;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的实践可以看出来抽象类对代码的复用性和简洁性还是有很大帮助的…</p><h3 id="八、接口"><a href="#八、接口" class="headerlink" title="八、接口"></a>八、接口</h3><h5 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h5><p>看下面的代码模拟一下现实中的<code>USB</code>接口…</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Interface01 &#123;    public static void main(String[] args) &#123;        Phone phone &#x3D; new Phone();        Camera camera &#x3D; new Camera();        Computer computer &#x3D; new Computer();        computer.work(phone);      &#x2F;&#x2F;把手机接入到计算机        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);        computer.work(camera);      &#x2F;&#x2F;把相机接入到计算机    &#125;&#125;public interface UsbInterface &#123;     &#x2F;&#x2F;接口中abstract和public可以省略    public void start();    public void stop();&#125;public class Phone implements UsbInterface&#123; &#x2F;&#x2F;Phone类实现了UsbInterface    @Override    public void start() &#123;&#x2F;&#x2F;实现UsbInterface接口规定&#x2F;声明的方法        System.out.println(&quot;手机开始工作...&quot;);    &#125;    @Override    public void stop() &#123;&#x2F;&#x2F;实现UsbInterface接口规定&#x2F;声明的方法        System.out.println(&quot;手机停止工作...&quot;);    &#125;&#125;public class Camera implements UsbInterface&#123; &#x2F;&#x2F;Camera类实现了UsbInterface    @Override    public void start() &#123;        System.out.println(&quot;相机开始工作了...&quot;);    &#125;    @Override    public void stop() &#123;        System.out.println(&quot;相机停止工作了...&quot;);    &#125;&#125;public class Computer &#123;    public void work(UsbInterface usbInterface)&#123;&#x2F;&#x2F;计算机工作        usbInterface.start();        usbInterface.stop();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Phone</code>类实现了<code>UsbInterface</code>，即<code>Phone</code>类需要实现<code>UsbInterface</code>接口规定&#x2F;声明的方法</p><h5 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h5><p>接口就是给出一些没有实现的方法，封装到一起，到某个类要使用的时候，在根据具体情况把这些方法写出来。语法：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">interface 接口名&#123;&#x2F;&#x2F;属性&#x2F;&#x2F;方法（1.抽象方法 2.默认实现方法 3.静态方法）&#125;class 类名 implements 接口&#123;&#x2F;&#x2F;自己属性&#x2F;&#x2F;自己方法&#x2F;&#x2F;必须实现接口的抽象方法&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在<code>JDK7.0</code>前，接口里的所有方法都没有方法体，即都是抽象方法。<code>JDK8.0</code>后接口可以有静态方法，默认方法，也就是说接口中可以有方法的具体实现</p><p>默认实现方法，需要使用<code>default</code>关键字修饰，如下</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">default public void ok()&#123;    System.out.println(&quot;OK&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><p>接口不能被实例化</p><p>接口中所有的方法是<code>public</code>方法，接口中抽象方法，可以不用<code>abstract</code>修饰</p><p>一个普通类实现接口，就必须将该接口的所有方法都实现</p><p>这里有一个快捷键，在下图报错的位置，使用<code>Alt+Enter</code>，选择<code>Implement methods</code>即可快速导入接口中所有要实现的方法</p><p><img src="/2022/11/13/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%EF%BC%89%E7%AC%94%E8%AE%B0/image-20221120190852637.png" alt="image-20221120190852637"></p><p>抽象类实现接口，可以不用实现接口的方法</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">interface IA&#123;    void say();    void hi();&#125;abstract class Tiger implements IA&#123;&#125;&#x2F;&#x2F;不会报错，抽象类可以不实现<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个类同时可以实现多个接口</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">interface IB&#123;    void hi();&#125;interface IC&#123;    void say();&#125;class Pig implements IB,IC&#123;&#x2F;&#x2F;Pig类实现了IB和IC两个接口    public void hi() &#123;&#125;    public void say() &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口中的属性，只能是<code>final</code>的，而且是<code>public static final</code>修饰符</p><p>接口中属性的访问形式：接口名.属性名</p><p>接口不能继承其他的类，但是可以继承多个别的接口</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">interface IB&#123;    void hi();&#125;interface IC&#123;    void say();&#125;class Pig implements IB,IC&#123;&#x2F;&#x2F;同时实现了多个接口，用逗号分隔    public void hi()&#123;&#125;    public void say()&#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口的修饰符只能是public和默认，这点和类的修饰符是一样的</p><h5 id="接口和继承的区别"><a href="#接口和继承的区别" class="headerlink" title="接口和继承的区别"></a>接口和继承的区别</h5><p>继承的价值主要在于：解决代码的复用性和可维护性</p><p>接口的价值主要在于：设计，设计好各种规范（方法），让其它类去实现这些方法</p><p>子类继承了父类，就自动的拥有父类的功能，如果子类需要扩展功能，可以通过实现接口的方式扩展，可以理解实现接口是对 单继承机制的一种补充</p><p>继承是满足<code>is-a</code>的关系，而接口只需满足<code>like-a</code>的关系</p><p>接口在一定程度上实现了代码解耦，即：接口规范性+动态绑定机制</p><h5 id="接口的多态特性"><a href="#接口的多态特性" class="headerlink" title="接口的多态特性"></a>接口的多态特性</h5><p>多态参数，在前面的代码里<code>UsbInterface usb</code>，即可以接收手机对象，又可以接收相机对象，体现了借口多态，且接口类型的变量可以指向实现了接口的对象实例</p><p>多态数组，在Usb数组中，存放Phone和Camera对象，</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class InterfacePolyArr &#123;    public static void main(String[] args) &#123;        Usb[] usb&#x3D;new Usb[2];        usb[0]&#x3D;new Phone_();        usb[1]&#x3D;new Camera_();&#x2F;&#x2F;可以存放不同的对象        for (int i&#x3D;0;i&lt; usb.length;i++)&#123;            usb[i].work();      &#x2F;&#x2F;动态绑定机制            if (usb[i] instanceof Phone_)&#123;&#x2F;&#x2F;判断运行类型是否一致                ((Phone_) usb[i]).call();            &#125;        &#125;    &#125;&#125;interface Usb&#123;    void work();&#125;class Phone_ implements Usb&#123;    public void call()&#123;        System.out.println(&quot;手机可以打电话...&quot;);    &#125;    public void work() &#123;        System.out.println(&quot;手机工作中...&quot;);    &#125;&#125;class Camera_ implements Usb&#123;    public void work() &#123;        System.out.println(&quot;相机工作中...&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多态传递，用下面的例子来说，如果<code>IG</code>继承了<code>IH</code>接口，而<code>Teacher</code>类实现了<code>IG</code>接口，那么，实际上就相当于<code>Teacher</code>类也实现了<code>IH</code>接口</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class InterfacePolyPass &#123;    public static void main(String[] args) &#123;        IG ig&#x3D;new Teacher();        IH ih&#x3D;new Teacher();    &#125;&#125;interface IH&#123;&#125;interface IG extends IH&#123;&#125;class Teacher implements IG&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、内部类"><a href="#九、内部类" class="headerlink" title="九、内部类"></a>九、内部类</h3><h5 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h5><p>一个类的内部又完整的嵌套了另一个类结构。被嵌套的类称为内部类，嵌套其他类的类称为外部类，内部类最大的特点就是可以直接访问私有属性，并且可以提现类与类之间的包含关系</p><p>基本语法：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class Outer&#123;&#x2F;&#x2F;外部类    class Inner&#123;&#x2F;&#x2F;内部类            &#125;&#125;class Other&#123;&#x2F;&#x2F;外部其他类&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h5><p>定义在外部类局部位置上（比如方法内）：</p><ol><li>局部内部类（有类名）</li><li>匿名内部类（没有类名）</li></ol><p>定义在外部类的成员位置上：</p><ol><li>成员内部类（没用static修饰）</li><li>静态内部类（使用static修饰）</li></ol><h5 id="局部内部类的使用"><a href="#局部内部类的使用" class="headerlink" title="局部内部类的使用"></a>局部内部类的使用</h5><ol><li><p>定义在外部类的局部位置，比如方法中，并且有类名</p></li><li><p>可以直接访问内外部类的所有成员，包含私有的</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class Outer02&#123;    private int n1&#x3D;100;    private void m2()&#123;&#125;    public void m1()&#123;        class Inner02&#123;&#x2F;&#x2F;局部内部类            public void f1()&#123;                System.out.println(&quot;n1&#x3D;&quot;+n1);&#x2F;&#x2F;访问了外部类的n1（私有属性）                m2();&#x2F;&#x2F;访问了外部类的m2（私有方法）            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不能添加访问修饰符，因为它的地位就是一个局部变量，局部变量是不能使用修饰符的。但是可以使用final修，因为局部变量也可以使用final</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class Outer02&#123;    public void m1()&#123;        public class Inner02&#123;&#x2F;&#x2F;报错，局部内部类不能添加访问修饰符        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class Outer02&#123;    public void m1()&#123;        final class Inner02&#123;&#x2F;&#x2F;此处使用final修饰        &#125;        class Inner03 extends Inner02&#123;&#125;&#x2F;&#x2F;报错，final修饰后无法继承    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>作用域：仅仅在定义它的方法或代码块中</p></li><li><p>局部内部类—访问—&gt;外部类的成员[访问方式：直接访问]</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class Outer02&#123;    private int n1&#x3D;100;    private void m2()&#123;&#125;    public void m1()&#123;        class Inner02&#123;&#x2F;&#x2F;局部内部类            public void f1()&#123;                System.out.println(&quot;n1&#x3D;&quot;+n1);&#x2F;&#x2F;访问了外部类的n1（私有属性）                m2();&#x2F;&#x2F;访问了外部类的m2（私有方法）            &#125;        &#125;    &#125;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>外部类—方法—&gt;局部内部类的成员[访问方式：创建对象，再访问(注意：必须在作用域内)]</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class Outer02&#123;    private int n1&#x3D;100;    private void m2()&#123;&#125;    public void m1()&#123;        final class Inner02&#123;  &#x2F;&#x2F;局部内部类            public void f1()&#123;                System.out.println(&quot;n1&#x3D;&quot;+n1);                m2();            &#125;        &#125;        Inner02 inner02 &#x3D; new Inner02();&#x2F;&#x2F;先创建对象        inner02.f1();&#x2F;&#x2F;再访问内部类的成员    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>外部其他类—不能访问—&gt;局部内部类（因为局部内部类地位是一个局部变量）</p></li><li><p>如果外部类和局部内部类的成员重名时，默认遵守就近原则，如果想访问外部类的成员，则可以使用（外部类名.this.成员）去访问</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class Outer02&#123;    private int n1&#x3D;100;    public void m1()&#123;        final class Inner02&#123;  &#x2F;&#x2F;局部内部类            private int n1&#x3D;800;            public void f1()&#123;                System.out.println(&quot;n1&#x3D;&quot;+n1);&#x2F;&#x2F;输出n1&#x3D;800(内部类n1)                System.out.println(&quot;n1&#x3D;&quot;+Outer02.this.n1);&#x2F;&#x2F;输出n1&#x3D;100(外部类n1)            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>注意：</p><ol><li>局部内部类定义在方法中&#x2F;代码块</li><li>作用域在方法体或者代码块中</li><li>本质仍然是一个类</li></ol><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><p>匿名内部类是定义在外部类的局部位置，比如在方法中，并且没有类名</p><ol><li>本质是类</li><li>内部类</li><li>该类没有名字</li><li>同时还是一个对象</li></ol><p>基本语法：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">new 类或接口(参数列表)&#123;类体&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>匿名内部类既是一个类的定义，同时它本身也是一个对象，因此从语法上看，它既有定义类的特征。也有创建对象的特征。对前面代码分析可以看出这个特点，因此可以调用匿名内部类方法</p><p>可以直接访问外部类的所有成员，包含私有的</p><p>不能添加访问修饰符，因为它的地位就是一个局部变量</p><p>作用域仅仅在定义它的方法或代码块中</p><p>匿名内部类—访问—&gt;外部类成员[访问方式：直接访问]</p><p>外部其他类—不能访问—&gt;匿名内部类（因为匿名内部类是一个局部变量）</p><p>如果外部类和匿名内部类的成员重名时，匿名内部类去访问的话，默认遵循就近原则，如果想访问外部类成员，则可以使用（外部类名.this）去访问</p>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>房屋出租项目-Java</title>
      <link href="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/"/>
      <url>/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/</url>
      
        <content type="html"><![CDATA[<p>第二个项目…应该比第一个复杂一点</p><p>一个一个功能逐步实现 [明确完成功能&#x3D;&gt;思路分析&#x3D;&gt;代码实现]</p><p>这次创建多个包，各司其职，再利用<code>HouseRentApp</code>来完成调用</p><p><img src="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/image-20221109195601840.png" alt="image-20221109195601840"></p><h3 id="一-需求说明"><a href="#一-需求说明" class="headerlink" title="一.需求说明"></a>一.需求说明</h3><p>对房屋信息的各种操作（添加、修改和删除），可以用数组实现</p><p>输出房屋明细表</p><p>主菜单界面如下</p><p><img src="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/image-20221109195655745.png" alt="image-20221109195655745"></p><h3 id="二、引入Utility工具类"><a href="#二、引入Utility工具类" class="headerlink" title="二、引入Utility工具类"></a>二、引入Utility工具类</h3><p>这里用了韩顺平老师的代码，使用<code>类.方法（）</code></p><p>因为当一个方法是<code>static</code>时，就是静态方法</p><p>静态方法可以直接通过类名调用</p><p>源码如下</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package utils;&#x2F;**工具类的作用:处理各种情况的用户输入，并且能够按照程序员的需求，得到用户的控制台输入。*&#x2F;import java.util.*;&#x2F;***&#x2F;public class Utility &#123;&#x2F;&#x2F;静态属性。。。    private static Scanner scanner &#x3D; new Scanner(System.in);    &#x2F;**     * 功能：读取键盘输入的一个菜单选项，值：1——5的范围     * @return 1——5     *&#x2F;    public static char readMenuSelection() &#123;        char c;        for (; ; ) &#123;            String str &#x3D; readKeyBoard(1, false);&#x2F;&#x2F;包含一个字符的字符串            c &#x3D; str.charAt(0);&#x2F;&#x2F;将字符串转换成字符char类型            if (c !&#x3D; &#39;1&#39; &amp;&amp; c !&#x3D; &#39;2&#39; &amp;&amp;                 c !&#x3D; &#39;3&#39; &amp;&amp; c !&#x3D; &#39;4&#39; &amp;&amp; c !&#x3D; &#39;5&#39;) &#123;                System.out.print(&quot;选择错误，请重新输入：&quot;);            &#125; else break;        &#125;        return c;    &#125;         &#x2F;**     * 功能：读取键盘输入的一个字符     * @return 一个字符     *&#x2F;    public static char readChar() &#123;        String str &#x3D; readKeyBoard(1, false);&#x2F;&#x2F;就是一个字符        return str.charAt(0);    &#125;    &#x2F;**     * 功能：读取键盘输入的一个字符，如果直接按回车，则返回指定的默认值；否则返回输入的那个字符     * @param defaultValue 指定的默认值     * @return 默认值或输入的字符     *&#x2F;        public static char readChar(char defaultValue) &#123;        String str &#x3D; readKeyBoard(1, true);&#x2F;&#x2F;要么是空字符串，要么是一个字符        return (str.length() &#x3D;&#x3D; 0) ? defaultValue : str.charAt(0);    &#125;        &#x2F;**     * 功能：读取键盘输入的整型，长度小于2位     * @return 整数     *&#x2F;    public static int readInt() &#123;        int n;        for (; ; ) &#123;            String str &#x3D; readKeyBoard(10, false);&#x2F;&#x2F;一个整数，长度&lt;&#x3D;10位            try &#123;                n &#x3D; Integer.parseInt(str);&#x2F;&#x2F;将字符串转换成整数                break;            &#125; catch (NumberFormatException e) &#123;                System.out.print(&quot;数字输入错误，请重新输入：&quot;);            &#125;        &#125;        return n;    &#125;    &#x2F;**     * 功能：读取键盘输入的 整数或默认值，如果直接回车，则返回默认值，否则返回输入的整数     * @param defaultValue 指定的默认值     * @return 整数或默认值     *&#x2F;    public static int readInt(int defaultValue) &#123;        int n;        for (; ; ) &#123;            String str &#x3D; readKeyBoard(10, true);            if (str.equals(&quot;&quot;)) &#123;                return defaultValue;            &#125;        &#x2F;&#x2F;异常处理...            try &#123;                n &#x3D; Integer.parseInt(str);                break;            &#125; catch (NumberFormatException e) &#123;                System.out.print(&quot;数字输入错误，请重新输入：&quot;);            &#125;        &#125;        return n;    &#125;         &#x2F;**     * 功能：读取键盘输入的指定长度的字符串     * @param limit 限制的长度     * @return 指定长度的字符串     *&#x2F;         public static String readString(int limit) &#123;        return readKeyBoard(limit, false);    &#125;         &#x2F;**     * 功能：读取键盘输入的指定长度的字符串或默认值，如果直接回车，返回默认值，否则返回字符串     * @param limit 限制的长度     * @param defaultValue 指定的默认值     * @return 指定长度的字符串     *&#x2F;        public static String readString(int limit, String defaultValue) &#123;        String str &#x3D; readKeyBoard(limit, true);        return str.equals(&quot;&quot;)? defaultValue : str;    &#125; &#x2F;** * 功能：读取键盘输入的确认选项，Y或N * 将小的功能，封装到一个方法中. * @return Y或N *&#x2F;public static char readConfirmSelection() &#123;    System.out.println(&quot;请输入你的选择(Y&#x2F;N): 请小心选择&quot;);    char c;    for (; ; ) &#123;&#x2F;&#x2F;无限循环    &#x2F;&#x2F;在这里，将接受到字符，转成了大写字母    &#x2F;&#x2F;y &#x3D;&gt; Y n&#x3D;&gt;N        String str &#x3D; readKeyBoard(1, false).toUpperCase();        c &#x3D; str.charAt(0);        if (c &#x3D;&#x3D; &#39;Y&#39; || c &#x3D;&#x3D; &#39;N&#39;) &#123;            break;        &#125; else &#123;            System.out.print(&quot;选择错误，请重新输入：&quot;);        &#125;    &#125;    return c;&#125; &#x2F;** * 功能： 读取一个字符串 * @param limit 读取的长度 * @param blankReturn 如果为true ,表示 可以读空字符串。  *   如果为false表示 不能读空字符串。 *  *如果输入为空，或者输入大于limit的长度，就会提示重新输入。 * @return *&#x2F;private static String readKeyBoard(int limit, boolean blankReturn) &#123;    &#x2F;&#x2F;定义了字符串String line &#x3D; &quot;&quot;; &#x2F;&#x2F;scanner.hasNextLine() 判断有没有下一行    while (scanner.hasNextLine()) &#123;        line &#x3D; scanner.nextLine();&#x2F;&#x2F;读取这一行       &#x2F;&#x2F;如果line.length&#x3D;0, 即用户没有输入任何内容，直接回车if (line.length() &#x3D;&#x3D; 0) &#123;            if (blankReturn) return line;&#x2F;&#x2F;如果blankReturn&#x3D;true,可以返回空串            else continue; &#x2F;&#x2F;如果blankReturn&#x3D;false,不接受空串，必须输入内容        &#125; &#x2F;&#x2F;如果用户输入的内容大于了 limit，就提示重写输入  &#x2F;&#x2F;如果用户如的内容 &gt;0 &lt;&#x3D; limit ,我就接受        if (line.length() &lt; 1 || line.length() &gt; limit) &#123;            System.out.print(&quot;输入长度（不能大于&quot; + limit + &quot;）错误，请重新输入：&quot;);            continue;        &#125;        break;    &#125;     return line;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、完成domain类-x2F-数据层"><a href="#三、完成domain类-x2F-数据层" class="headerlink" title="三、完成domain类&#x2F;数据层"></a>三、完成domain类&#x2F;数据层</h3><p>一个<code>House</code>对象表示一个房屋信息</p><p><code>House</code>类有哪些属性，可以通过给出的界面分析得到</p><p>如下图</p><p><img src="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/image-20221109195916485.png" alt="image-20221109195916485"></p><p>即<code>编号</code> <code>房主</code> <code>电话</code> <code>地址</code> <code>月租</code> <code>状态（未出租/已出租）</code></p><p>在<code>House.java</code>中创建相应的属性，再创建构造器和<code>setter</code>，<code>getter</code>方法</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private int id;private String name;private String phone;private String address;private int rent;private String state;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用快捷键<code>alt+insert</code>创建<code>toString</code>，根据界面重写<code>toString</code>方法</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@Overridepublic String toString() &#123;    return id +            &quot;\t\t&quot; + name +            &quot;\t&quot; + phone +            &quot;\t\t&quot; + address +            &quot;\t&quot; + rent +            &quot;\t&quot; + state;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、完成View类-x2F-界面"><a href="#四、完成View类-x2F-界面" class="headerlink" title="四、完成View类&#x2F;界面"></a>四、完成View类&#x2F;界面</h3><p>功能说明：</p><p>用户打开软件，可以看到主菜单，可以退出软件</p><p>主菜单和上一个零钱通项目里的主菜单一致，我们这里也使用<code>do-while</code>循环和<code>loop</code>来控制进入和退出</p><p>直接上代码</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">do &#123;    System.out.println(&quot;\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;房屋出租系统&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    System.out.println(&quot;\t\t1.新 增 房 源&quot;);    System.out.println(&quot;\t\t2.查 找 房 源&quot;);    System.out.println(&quot;\t\t3.删 除 房 屋 信 息&quot;);    System.out.println(&quot;\t\t4.修 改 房 屋 信 息&quot;);    System.out.println(&quot;\t\t5.房 屋 列 表&quot;);    System.out.println(&quot;\t\t6.退      出&quot;);    System.out.print(&quot;请输入你的选择（1-6）&quot;);    key &#x3D; Utility.readChar();    switch (key)&#123;        case &#39;1&#39;:        break;        case &#39;2&#39;:        break;        case &#39;3&#39;:        break;        case &#39;4&#39;:        break;        case &#39;5&#39;:        break;        case &#39;6&#39;:        loop &#x3D; false;        break;    &#125;&#125;while (loop);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们可以在<code>HouseRentApp</code>里调用这个<code>mainMeun</code>方法了</p><p>直接使用一行代码完成调用，不需要再去接收了，啰嗦且麻烦</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">new HouseView().mainMenu();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="五、完成service类-x2F-业务层"><a href="#五、完成service类-x2F-业务层" class="headerlink" title="五、完成service类&#x2F;业务层"></a>五、完成service类&#x2F;业务层</h3><p>响应<code>HouseView</code>的调用</p><p>完成对房屋信息的各种操作（增删改查&#x2F;crud）（用数组实现）</p><h5 id="新增房屋"><a href="#新增房屋" class="headerlink" title="新增房屋"></a>新增房屋</h5><p>定义<code>House[]</code>，保存<code>House</code>对象，顺便再初始化一个对象用于测试列表</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private House[] houses;public HouseService(int size)&#123;houses&#x3D;new House[size];houses[0]&#x3D;new House(1,&quot;Jack&quot;,&quot;188&quot;,&quot;杭电路&quot;,20000,&quot;已出租&quot;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写<code>list()</code>用来返回所有房屋信息</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public House[] lists()&#123;return houses;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<code>HouseView</code>中调用<code>list</code>输出房屋列表</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private HouseService houseService &#x3D;new HouseService(10);public void listHouse()&#123;    System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;房屋列表&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    System.out.println(&quot;编号\t\t房主\t\t电话\t\t地址\t\t月租\t\t状态（未出租&#x2F;已出租）&quot;);    House[] houses &#x3D; houseService.list();    for (int i &#x3D; 0; i &lt; houses.length; i++) &#123;        if (houses[i] &#x3D;&#x3D; null)&#123;&#x2F;&#x2F;加入判断机制避免输出空的数组            break;        &#125;        System.out.println(houses[i]);&#x2F;&#x2F;House类中toString重写生效    &#125;    System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;房屋列表显示完毕&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面来写添加房屋的功能</p><p>在<code>HouseView</code>中加入<code>addHouse</code>的方法，显示界面和接收输入</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public void addhouse()&#123;    System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;添加房屋&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    System.out.print(&quot;姓名：&quot;);    String name &#x3D; Utility.readString(8);    System.out.print(&quot;电话：&quot;);    String phone &#x3D; Utility.readString(12);    System.out.print(&quot;地址：&quot;);    String address &#x3D; Utility.readString(16);    System.out.print(&quot;月租：&quot;);    int rent &#x3D; Utility.readInt();    System.out.print(&quot;状态：&quot;);    String state &#x3D; Utility.readString(3);    House newHouse &#x3D; new House(0, name, phone, address, rent, state);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里发现了一个问题，添加的房屋需要编号…还有房屋是否添加成功的判断</p><p>所以我们再<code>HouseService</code>里又添加了两个属性，用来记录房屋个数和<code>ID</code>自增长</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">private int houseNums&#x3D;1;private int idCounter&#x3D;1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后继续编写<code>add</code>方法用来判断房屋是否添加成功，返回<code>boolean</code>，同时更新新增房屋的编号</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public boolean add(House newHouse)&#123;    if (houseNums &#x3D;&#x3D; houses.length)&#123;        System.out.println(&quot;房屋添加失败&quot;);        return false;    &#125;    houses[houseNums++]&#x3D;newHouse;    newHouse.setId(++idCounter);&#x2F;&#x2F;ID自增长    return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后就可以在<code>addhouse</code>里调用<code>add</code>方法了</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">if (houseService.add(newHouse))&#123;    System.out.println(&quot;添加房屋成功&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="删除房屋"><a href="#删除房屋" class="headerlink" title="删除房屋"></a>删除房屋</h5><p>在<code>HouseView</code>中编写<code>delHouse()</code>，用于显示界面和接收输入的需要删除的<code>ID</code></p><p>因为我们还没写del方法，所以先写个界面</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public void delhouse()&#123;    System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;删除房屋&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    System.out.println(&quot;请输入待删除房屋的编号（-1退出）&quot;);    int delId &#x3D; Utility.readInt();    if (delId &#x3D;&#x3D; -1) &#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;放弃删除房屋信息&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);        return;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>HouseService</code>中编写方法<code>del</code>，完成房屋删除任务，然后返回一个<code>boolean</code></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public boolean del(int delId)&#123;    int index&#x3D;-1;    for (int i&#x3D;0;i&lt;houseNums;i++)&#123;        if (delId&#x3D;&#x3D;houses[i].getId())&#123;            index&#x3D;i;&#x2F;&#x2F;使用index记录i        &#125;    &#125;    if (index &#x3D;&#x3D; -1) &#123;&#x2F;&#x2F;说明delId在数组中不存在        return false;    &#125;    for (int i&#x3D;index;i&lt;houseNums-1;i++)&#123;         houses[i]&#x3D;houses[i+1];    &#125;    houses[--houseNums]&#x3D;null;&#x2F;&#x2F;把原来存在的房屋信息的最后一个设置为null，并且房屋数减一    return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里要注意不能忘记删除完后更新<code>houseNums</code>，如果高中学过技术，那么对下面采用覆盖的方式删除房屋信息可能能够更快地理解…</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">for (int i&#x3D;index;i&lt;houseNums-1;i++)&#123;     houses[i]&#x3D;houses[i+1];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>至此我们就能在<code>HouseView</code>中调用<code>del</code>方法了，不过在这之前，我们先写个确认删除的功能</p><p>因为我们在最开始引入了韩老师的工具类，所以我们直接调用<code>readConfirmSelection()</code>即可</p><p>这里也放一下<code>readConfirmSelection()</code>方法的源码</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static char readConfirmSelection() &#123;    System.out.println(&quot;请输入你的选择(Y&#x2F;N): 请小心选择&quot;);    char c;    for (; ; ) &#123;&#x2F;&#x2F;无限循环        &#x2F;&#x2F;在这里，将接受到字符，转成了大写字母        &#x2F;&#x2F;y &#x3D;&gt; Y n&#x3D;&gt;N        String str &#x3D; readKeyBoard(1, false).toUpperCase();        c &#x3D; str.charAt(0);        if (c &#x3D;&#x3D; &#39;Y&#39; || c &#x3D;&#x3D; &#39;N&#39;) &#123;            break;        &#125; else &#123;            System.out.print(&quot;选择错误，请重新输入：&quot;);        &#125;    &#125;    return c;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确认的功能和调用<code>del</code>方法的代码如下</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">char choice &#x3D; Utility.readConfirmSelection();if (choice &#x3D;&#x3D; &#39;Y&#39;) &#123;&#x2F;&#x2F;确认删除房屋    if (houseService.del(delId)) &#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;删除房屋信息成功&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    &#125;    else &#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;房屋编号不存在，删除失败&quot;);    &#125;&#125;else &#123;    System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;放弃删除房屋信息&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，删除房屋的功能就完成了</p><h5 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h5><p>这个没什么好说的，为了统一一下视觉效果，我们在<code>HouseView</code>里单独写一个<code>exit</code>方法</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public void exit()&#123;    char c&#x3D;Utility.readConfirmSelection();    if (c&#x3D;&#x3D;&#39;Y&#39;)&#123;        loop&#x3D;false;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>switch</code>里调用就完事了</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">case &#39;6&#39;:    exit();    break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="查找功能"><a href="#查找功能" class="headerlink" title="查找功能"></a>查找功能</h5><p>在<code>HouseView</code>里编写<code>findHouse</code>方法，同上先编写界面的输出</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public void findHouse()&#123;    System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;查找房屋信息&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    System.out.println(&quot;请输入要查找的id&quot;);    int findId &#x3D; Utility.readInt();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后去编写要被调用的方法，我们取名为<code>findById</code></p><p>跟之前写的<code>add</code>、<code>del</code>也类似，找到返回<code>houses[i]</code>，没找到则返回空</p><p>比较简单，代码如下</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public House findById(int findId)&#123;    for (int i&#x3D;0;i&lt;houseNums;i++)&#123;        if (findId&#x3D;&#x3D;houses[i].getId())&#123;            return houses[i];        &#125;    &#125;    return null;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后去<code>findHouse</code>里调用，逻辑还是比较清晰的</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">if (house !&#x3D; null)&#123;    System.out.println(house);&#125;else &#123;    System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;查找房屋信息id不存在&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后不要忘了在<code>switch</code>里调用哈</p><p>写到这里已经0点了，但是只还剩下最后一个修改功能，那就写写完吧</p><h5 id="修改功能"><a href="#修改功能" class="headerlink" title="修改功能"></a>修改功能</h5><p>在<code>HouseView</code>里编写<code>update</code>方法</p><p>先接收个待修改房屋的编号，并且确定是否要修改</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;修改房屋信息&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);System.out.println(&quot;请选择待修改房屋编号（-1表示退出）&quot;);int updateId &#x3D; Utility.readInt();if (updateId &#x3D;&#x3D; -1)&#123;    System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;放弃修改房屋信息&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    return;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时也不要忘了验证编号是否存在</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">House house &#x3D; houseService.findById(updateId);if (house &#x3D;&#x3D; null) &#123;    System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;修改房屋信息编号不存在&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    return;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就是输出+修改信息，代码有点长，但其实都是重复的</p><p>这里直接回车的话就认定为不修改，并且规定长度限制</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">System.out.print(&quot;姓名(&quot; + house.getName() + &quot;): &quot;);String name &#x3D; Utility.readString(8, &quot;&quot;);if (!&quot;&quot;.equals(name)) &#123;    house.setName(name);&#125;System.out.print(&quot;电话(&quot; + house.getPhone() + &quot;):&quot;);String phone &#x3D; Utility.readString(12, &quot;&quot;);if (!&quot;&quot;.equals(phone)) &#123;    house.setPhone(phone);&#125;System.out.print(&quot;地址(&quot; + house.getAddress() + &quot;):&quot;);String address &#x3D; Utility.readString(18, &quot;&quot;);if (!&quot;&quot;.equals(address)) &#123;    house.setAddress(address);&#125;System.out.print(&quot;租金(&quot; + house.getRent() + &quot;):&quot;);int rent &#x3D; Utility.readInt(-1);if (rent !&#x3D; -1) &#123;    house.setRent(rent);&#125;System.out.println(&quot;状态(&quot; + house.getState() + &quot;):&quot;);String state &#x3D; Utility.readString(3, &quot;&quot;);if (!&quot;&quot;.equals(state)) &#123;    house.setState(state);&#125;System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;修改房屋信息成功&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>房屋出租是我尝试的第二个项目，文章开头说比零钱通会复杂一点</p><p>好像是复杂了亿点…….</p><p>附图</p><p><img src="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/image-20221111004048722.png" alt="image-20221111004048722"></p><p><img src="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/image-20221111004121835.png" alt="image-20221111004121835"></p><p><img src="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/image-20221111004137063.png" alt="image-20221111004137063"></p><p><img src="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/image-20221111004150819.png" alt="image-20221111004150819"></p><p>不过能写完还是很开心的，上传完就睡觉了……附上现在的时间记录一下吧</p><p><img src="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/image-20221111003728524.png" alt="image-20221111003728524"></p>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java入门项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零钱通项目-Java</title>
      <link href="/2022/11/09/%E9%9B%B6%E9%92%B1%E9%80%9A%E9%A1%B9%E7%9B%AE-Java/"/>
      <url>/2022/11/09/%E9%9B%B6%E9%92%B1%E9%80%9A%E9%A1%B9%E7%9B%AE-Java/</url>
      
        <content type="html"><![CDATA[<p>这是我学Java这么久的第一个简单的小项目</p><p>为了能更好地了解OOP的好处，我先使用了面向过程进行了编写，然后再用面向对象重新再写一次</p><h3 id="一、零钱通项目需求"><a href="#一、零钱通项目需求" class="headerlink" title="一、零钱通项目需求"></a>一、零钱通项目需求</h3><p>具体界面如下图</p><p><img src="/2022/11/09/%E9%9B%B6%E9%92%B1%E9%80%9A%E9%A1%B9%E7%9B%AE-Java/image-20221109170656388.png" alt="image-20221109170656388"></p><p>一共包含4个功能</p><p><code>1.零钱通明细：可以查询入账+消费的流水</code></p><p><code>2.收益入账：对余额进行充值，输入金额，输出明细</code></p><p><code>3.消费：顾名思义就是花钱，输入用途和金额，输出明细，并且对金额进行验证，不能出现透支等情况</code></p><p><code>4.退出：写一个是否确认退出输入y/n的条件</code></p><p>如下图</p><p><img src="/2022/11/09/%E9%9B%B6%E9%92%B1%E9%80%9A%E9%A1%B9%E7%9B%AE-Java/image-20221109171009202.png" alt="image-20221109171009202"></p><h3 id="二、面向过程编写"><a href="#二、面向过程编写" class="headerlink" title="二、面向过程编写"></a>二、面向过程编写</h3><h5 id="创建一些基本的属性"><a href="#创建一些基本的属性" class="headerlink" title="创建一些基本的属性"></a>创建一些基本的属性</h5><p>因为刚入门所以采用比较简单的字符串拼接方法来显示流水</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Boolean loop&#x3D;true;&#x2F;&#x2F;判断是否退出程序Scanner sc&#x3D;new Scanner(System.in);String key&#x3D;&quot;&quot;;&#x2F;&#x2F;接收数字选择菜单String details&#x3D;&quot;---------------零钱通明细---------------\n&quot;;double money&#x3D;0;&#x2F;&#x2F;接收金额double balance&#x3D;0;&#x2F;&#x2F;余额String note&#x3D;&quot;&quot;;&#x2F;&#x2F;消费用途<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为流水要显示日期，所以临时浅学了个<code>Data</code></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Date date&#x3D;null;SimpleDateFormat sdf&#x3D;new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;);&#x2F;&#x2F;日期格式化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>写一个<code>do-while</code>来嵌套整个系统</p><pre class="line-numbers language-none"><code class="language-none">do &#123;    &#125;while (loop);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出主菜单并且获取用户选择<code>Key</code></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;零钱通菜单&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);System.out.println(&quot;\t\t\t1 零钱通明细&quot;);System.out.println(&quot;\t\t\t2 收益入账&quot;);System.out.println(&quot;\t\t\t3 消费&quot;);System.out.println(&quot;\t\t\t4 退    出&quot;);System.out.print(&quot;请选择(1-4):&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>switch</code>语句来分别实现4个菜单选项的功能</p><pre class="line-numbers language-none"><code class="language-none">switch (key)&#123;    case &quot;1&quot;:    case &quot;2&quot;:    case &quot;3&quot;:    case &quot;4&quot;:    default:&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="功能1：零钱通明细"><a href="#功能1：零钱通明细" class="headerlink" title="功能1：零钱通明细"></a>功能1：零钱通明细</h5><p>因为采用字符串拼接所以明细相对简单，直接输出字符串<code>details</code>即可</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">case &quot;1&quot;:    System.out.println(details);    break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="功能2：收益入账"><a href="#功能2：收益入账" class="headerlink" title="功能2：收益入账"></a>功能2：收益入账</h5><p>虽然比较长但其实都是一些简单的功能，<code>if</code>用来判断充值是否为正数，主要就是<code>details</code>拼接的问题</p><pre class="line-numbers language-none"><code class="language-none">case &quot;2&quot;:    System.out.print(&quot;收益入账金额:&quot;);    money&#x3D;sc.nextDouble();&#x2F;&#x2F;接收入账金额    while (true) &#123;        if (money&lt;&#x3D;0)&#123;&#x2F;&#x2F;金额验证是否有效            System.out.println(&quot;输入有误，请重新输入&quot;);            System.out.print(&quot;收益入账金额:&quot;);            money&#x3D;sc.nextDouble();        &#125;        else &#123;            break;        &#125;    &#125;    balance+&#x3D;money;&#x2F;&#x2F;余额计算    date&#x3D;new Date();&#x2F;&#x2F;时间获取    details+&#x3D;&quot;\n收益入账\t+&quot;+money+&quot;\t&quot;+sdf.format(date)+&quot;\t&quot;+balance;&#x2F;&#x2F;拼接字符串    System.out.println(details);    break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="功能3：消费"><a href="#功能3：消费" class="headerlink" title="功能3：消费"></a>功能3：消费</h5><p>其实功能3和功能2基本一致，复制过来加个用途就能套用，<code>if</code>判断条件改为判断余额够不够</p><pre class="line-numbers language-none"><code class="language-none">case &quot;3&quot;:    System.out.print(&quot;消费用途:&quot;);    note&#x3D;sc.next();    System.out.print(&quot;消费金额:&quot;);    money&#x3D;sc.nextDouble();    while (true) &#123;        if (money&gt;balance)&#123;            System.out.println(&quot;余额不足，请重新输入&quot;);            System.out.print(&quot;消费用途:&quot;);            note&#x3D;sc.next();            System.out.print(&quot;消费金额:&quot;);            money&#x3D;sc.nextDouble();        &#125;        else &#123;            break;        &#125;    &#125;    balance-&#x3D;money;    date&#x3D;new Date();    details+&#x3D;&quot;\n&quot;+note+&quot;\t-&quot;+money+&quot;\t&quot;+sdf.format(date)+&quot;\t&quot;+balance;    System.out.println(details);    break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="功能4：退出"><a href="#功能4：退出" class="headerlink" title="功能4：退出"></a>功能4：退出</h5><p>常规的退出，利用前面的<code>loop</code>来退出零钱通系统</p><pre class="line-numbers language-none"><code class="language-none">System.out.println(&quot;是否确认退出，请输入y&#x2F;n&quot;);note&#x3D;sc.next();while(true)&#123;    if (note.equals(&quot;y&quot;))&#123;        loop&#x3D;false;        break;    &#125;    else if(note.equals(&quot;n&quot;))&#123;        loop&#x3D;true;        break;    &#125;    else &#123;        System.out.println(&quot;输入有误，请重新输入&quot;);        note&#x3D;sc.next();    &#125;&#125;break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="程序退出"><a href="#程序退出" class="headerlink" title="程序退出"></a>程序退出</h5><p>美观一点加一句退出项目</p><pre class="line-numbers language-none"><code class="language-none">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;选择退出了零钱通项目&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三、面向对象编写"><a href="#三、面向对象编写" class="headerlink" title="三、面向对象编写"></a>三、面向对象编写</h3><p>下面用OOP来写，其实直接照搬就好了</p><h5 id="创建属性"><a href="#创建属性" class="headerlink" title="创建属性"></a>创建属性</h5><p>同样的创建属性就不用过多赘述了</p><h5 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h5><p>写了四个方法：</p><p><code>details：输出流水</code></p><p><code>income：本质就是功能2的代码，下同</code></p><p><code>pay：功能3</code></p><p><code>exit：功能4</code></p><p>这里要注意的一点是方法里的退出是<code>return</code>不是<code>break</code></p><p>所以稍加更改就可以使用了</p><h5 id="创建主类"><a href="#创建主类" class="headerlink" title="创建主类"></a>创建主类</h5><p>再创建一个主类<code>SmallchangeApp</code>，完成对<code>SmallChangeSysOOP</code>的调用即可</p><p><img src="/2022/11/09/%E9%9B%B6%E9%92%B1%E9%80%9A%E9%A1%B9%E7%9B%AE-Java/image-20221109174850541.png" alt="image-20221109174850541"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>OOP更加灵活，用方法来管理各个功能，更容易维护和拓展</p>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java入门项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/2022/11/09/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/11/09/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="欢迎来到我的博客！这是我的第一篇文章"><a href="#欢迎来到我的博客！这是我的第一篇文章" class="headerlink" title="欢迎来到我的博客！这是我的第一篇文章"></a><strong>欢迎来到我的博客！这是我的第一篇文章</strong></h2><p>也没什么好说的，就记录一下我搭建博客的过程吧…</p><p>纯小白，看学长写的<a href="https://lcdzzz.github.io/2022/11/05/hexo-bo-ke-an-zhuang-jiao-cheng-tai-jiao-ji/">教程</a>一步步创建了Hexo博客，中间虽然出了很多的问题，不过最后都一个个百度解决了</p><h3 id="一、环境安装"><a href="#一、环境安装" class="headerlink" title="一、环境安装"></a>一、环境安装</h3><h5 id="安装git、Nodejs"><a href="#安装git、Nodejs" class="headerlink" title="安装git、Nodejs"></a>安装git、Nodejs</h5><p>用下面两条语句检查是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">-v</span><span class="token function">npm</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="安装cnpm-检查版本"><a href="#安装cnpm-检查版本" class="headerlink" title="安装cnpm,检查版本"></a>安装cnpm,检查版本</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cnpm <span class="token parameter variable">--registry</span><span class="token operator">=</span>http://registry.npm.taobao.orgcnpm <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h5><p>我第一次就是这里卡了导致后面博客加载不出来……..</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-clihexo <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="二、博客程序安装"><a href="#二、博客程序安装" class="headerlink" title="二、博客程序安装"></a>二、博客程序安装</h3><h5 id="连接Github"><a href="#连接Github" class="headerlink" title="连接Github"></a>连接Github</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"GitHub 用户名"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"GitHub 邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="创建ssh公钥秘钥"><a href="#创建ssh公钥秘钥" class="headerlink" title="创建ssh公钥秘钥"></a>创建ssh公钥秘钥</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"GitHub 邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将id_rsa.pub中的公钥添加到github的账号里</p><h5 id="用bash验证连接"><a href="#用bash验证连接" class="headerlink" title="用bash验证连接"></a>用bash验证连接</h5><p>这个地方我看的教程说会出现are you sure，但我验证的时候没出现，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里出现了个but还以为出了什么问题，搜了一圈发现没问题。。。</p><h5 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h5><p>Github的用户名+.github.io（必须要是这个）</p><h5 id="安装Hexo博客程序"><a href="#安装Hexo博客程序" class="headerlink" title="安装Hexo博客程序"></a>安装Hexo博客程序</h5><p>创建一个本地文件夹，在根目录右键bash</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里可能比较比较比较比较比较慢，因网而异吧</p><h5 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认端口4000，校园网的4000好像被占用了所以用<code>hexo server -p 5000</code>改端口号就行了</p><p>本地预览页<code>http://localhost:4000</code></p><h3 id="三、部署上传到Github"><a href="#三、部署上传到Github" class="headerlink" title="三、部署上传到Github"></a>三、部署上传到Github</h3><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 更改根目录_config.yml最后的地方</p><p>这里的分支我改成了main，之前用master好像上传不上去，但我不知道是不是分支的问题</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com/用户名/用户名.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里可能需要等一段时间，具体时间比较随缘</p><h5 id="至此你就可以通过下面的域名来访问自己的博客了"><a href="#至此你就可以通过下面的域名来访问自己的博客了" class="headerlink" title="至此你就可以通过下面的域名来访问自己的博客了"></a>至此你就可以通过下面的域名来访问自己的博客了</h5><pre class="line-numbers language-Text" data-language="Text"><code class="language-Text">https:&#x2F;&#x2F;用户名.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四、主题安装"><a href="#四、主题安装" class="headerlink" title="四、主题安装"></a>四、主题安装</h3><p>这里我拿matery主题来举例，其他的应该大同小异</p><h5 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h5><p>解压后，复制文件夹到博客主题文件夹</p><h5 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h5><p>改<code>theme</code>为<code>hexo-theme-matery</code>  &#x2F;&#x2F;主题名（必须跟主题文件夹名字一致）</p><p>改<code>url</code>为<code>http://用户名.github.io</code></p><p>改<code>per_page</code>为<code>6、12、18</code>（6的倍数）</p><p>改<code>language</code>为<code>zh-CN</code></p><h5 id="新建类别、标记、关于页"><a href="#新建类别、标记、关于页" class="headerlink" title="新建类别、标记、关于页"></a>新建类别、标记、关于页</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span>hexo new page <span class="token string">"tags"</span>hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>分别在新页面文件内添加以下内容</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-10 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="上传到Github"><a href="#上传到Github" class="headerlink" title="上传到Github"></a>上传到Github</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo ghexo s//测试hexo d      //上传<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="结束…"><a href="#结束…" class="headerlink" title="结束…"></a>结束…</h5><p>博主很懒</p><p>以后看博主心情更新吧…</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
