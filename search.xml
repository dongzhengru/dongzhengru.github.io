<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JDBC</title>
      <link href="/2022/12/25/JDBC/"/>
      <url>/2022/12/25/JDBC/</url>
      
        <content type="html"><![CDATA[<h3 id="一、编写步骤"><a href="#一、编写步骤" class="headerlink" title="一、编写步骤"></a>一、编写步骤</h3><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>使用<code>Java</code>语言操作关系型数据库的一套<code>API</code></p><h5 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h5><ul><li><p>创建工程，导入驱动jar包</p><p><img src="/JDBC/image-20221225161009612.png" alt="image-20221225161009612"></p></li><li><p>注册驱动</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Class<span class="token punctuation">.</span>forName<span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取连接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span>getConnection<span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Java代码需要发送<code>SQL</code>给<code>MySQL</code>服务端，就需要先建立连接</p></li><li><p>定义<code>SQL</code>语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">String <span class="token keyword">sql</span> <span class="token operator">=</span>  “<span class="token keyword">update</span>…” <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取执行<code>SQL</code>对象</p><p>执行<code>SQL</code>语句需要<code>SQL</code>执行对象，而这个执行对象就是<code>Statement</code>对象</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Statement stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span>createStatement<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行<code>SQL</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">stmt<span class="token punctuation">.</span>executeUpdate<span class="token punctuation">(</span><span class="token keyword">sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>处理返回结果</p></li><li><p>释放资源</p></li></ul><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> url<span class="token operator">=</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/db1"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password<span class="token operator">=</span><span class="token string">"dong"</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"update account set money = 2000 where id = 1"</span><span class="token punctuation">;</span>        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库设计</title>
      <link href="/2022/12/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/12/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>备忘录…</p><h3 id="一、数据库设计概念"><a href="#一、数据库设计概念" class="headerlink" title="一、数据库设计概念"></a>一、数据库设计概念</h3><p>表结构以及表与表之间的关联关系</p><p><img src="/2022/12/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20221224193255675.png" alt="image-20221224193255675"></p><h3 id="二、数据库设计的步骤"><a href="#二、数据库设计的步骤" class="headerlink" title="二、数据库设计的步骤"></a>二、数据库设计的步骤</h3><p><img src="/2022/12/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20221224193442545.png" alt="image-20221224193442545"></p><p>ER图：</p><p><img src="/2022/12/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20221224193525151.png" alt="image-20221224193525151"></p><h3 id="三、表关系"><a href="#三、表关系" class="headerlink" title="三、表关系"></a>三、表关系</h3><h5 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h5><ul><li>用户 和 用户详情</li><li>多用于表拆分，经常用的字段放一个表一个表，不经常用的字段放另一个表，提升查询性能</li></ul><h5 id="一对多（多对一）"><a href="#一对多（多对一）" class="headerlink" title="一对多（多对一）"></a>一对多（多对一）</h5><ul><li>部门 和 员工</li><li>M-1（M代表多）</li></ul><h5 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h5><ul><li>商品 和 订单</li><li>一个商品对应多个订单，一个订单包含多个商品</li></ul><h3 id="四、一对多"><a href="#四、一对多" class="headerlink" title="四、一对多"></a>四、一对多</h3><p>在M（多）的一方建立外键，指向1的一方主键</p><p><img src="/2022/12/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20221224195957029.png" alt="image-20221224195957029"></p><h3 id="五、多对多"><a href="#五、多对多" class="headerlink" title="五、多对多"></a>五、多对多</h3><p>建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><p><img src="/2022/12/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20221224200152978.png" alt="image-20221224200152978"></p><h3 id="六、一对一"><a href="#六、一对一" class="headerlink" title="六、一对一"></a>六、一对一</h3><p>在任意一方加入外键，关联另一方主键，并且设置外键为唯一（unique）</p><p><img src="/2022/12/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/image-20221224200602633.png" alt="image-20221224200602633"></p>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/2022/12/24/SQL/"/>
      <url>/2022/12/24/SQL/</url>
      
        <content type="html"><![CDATA[<p>本文以mysql为例…</p><h3 id="一、SQL通用语法"><a href="#一、SQL通用语法" class="headerlink" title="一、SQL通用语法"></a>一、SQL通用语法</h3><ol><li>SQL语句可以单行或多行，分号结尾</li><li>MySQL数据库的SQL语句不区分大小写，关键字建议大写</li><li>注释如下（注意<code>--</code> 后面有空格）</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">单行注释： <span class="token comment">-- 注释内容 或 #注释内容（MySQL特有）</span>多行注释： <span class="token comment">/* 注释 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="二、SQL分类"><a href="#二、SQL分类" class="headerlink" title="二、SQL分类"></a>二、SQL分类</h3><ul><li>DDL(Data Definition Language)数据定义语言，用来定义数据库对象：数据库，表，列等</li><li>DML(Data Manipulation Language)数据操作语言，用来对数据库中表的数据进行增删改</li><li>DQL(Data Query Language)数据查询语言，用来查询数据库中表的记录(数据)</li><li>DCL(Data Control Language)数据控制语言，用来定义数据库的访问权限和安全级别，及创建用户</li></ul><p><img src="/2022/12/24/SQL/image-20221221163849483.png" alt="image-20221221163849483"></p><h3 id="三、DDL-操作数据库、表"><a href="#三、DDL-操作数据库、表" class="headerlink" title="三、DDL-操作数据库、表"></a>三、DDL-操作数据库、表</h3><h5 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h5><ol><li><p>查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> 数据库名称<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> 数据库名称<span class="token punctuation">;</span><span class="token comment">-- 判断否存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> 数据库名称<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> 数据库名称<span class="token punctuation">;</span><span class="token comment">-- 判断是否存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">use</span> 数据库名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h5 id="操作数据表"><a href="#操作数据表" class="headerlink" title="操作数据表"></a>操作数据表</h5><ol><li><p>查询当前数据库下所有表名称</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询表结构</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">desc</span> 表名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建表（注意最后一行末尾，不能加逗号）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名 <span class="token punctuation">(</span>字段名<span class="token number">1</span> 数据类型<span class="token number">1</span><span class="token punctuation">,</span>            字段名<span class="token number">2</span> 数据类型<span class="token number">2</span><span class="token punctuation">,</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            字段名n 数据类型n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> 表名<span class="token punctuation">;</span><span class="token comment">--  判断是否存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改表名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">rename</span> <span class="token keyword">to</span> 新的表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加一列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 列名 数据类型<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改数据类型</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 列名 新数据类型<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改列名和数据类型</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 change 列名 新列名 新数据类型<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> 列名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><p><code>MySQL</code>数据类型可以分为以下三类：</p><ul><li>数值</li><li>日期</li><li>字符串</li></ul><p><img src="/2022/12/24/SQL/image-20221221172849958.png" alt="image-20221221172849958"></p><p>PS:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">score <span class="token keyword">double</span><span class="token punctuation">(</span>总长度，小数点后保留的位数<span class="token punctuation">)</span>score <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">-- 0~100 2（5为3+2）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">-- 定长</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">-- 变长</span><span class="token comment">-- 如果将“张三”字符存入两种类型，char占用10个字符空间，varchar占用2个字符空间</span><span class="token comment">-- char存储的性能高 浪费空间 varchar存储性能低 节约空间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、DML-增删改数据"><a href="#四、DML-增删改数据" class="headerlink" title="四、DML-增删改数据"></a>四、DML-增删改数据</h3><ol><li><p>给指定列添加数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>列名<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> stu<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>给全部列添加数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>批量添加数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>列名<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名  <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改表数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 列名<span class="token number">1</span><span class="token operator">=</span>值<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span><span class="token operator">=</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> 条件<span class="token punctuation">;</span><span class="token comment">-- 修改语句中如果不加where条件，则将所有数据都修改</span><span class="token keyword">update</span> stu <span class="token keyword">set</span> birthday <span class="token operator">=</span> <span class="token string">'1999-12-12'</span><span class="token punctuation">,</span> score <span class="token operator">=</span> <span class="token number">99.99</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token comment">-- 案例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 条件<span class="token punctuation">;</span><span class="token comment">-- 删除语句中如果不加where条件，则将所有数据删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="五、DQL-查询表的记录、数据"><a href="#五、DQL-查询表的记录、数据" class="headerlink" title="五、DQL-查询表的记录、数据"></a>五、DQL-查询表的记录、数据</h3><h5 id="查询语法"><a href="#查询语法" class="headerlink" title="查询语法"></a>查询语法</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>字段列表<span class="token keyword">from</span>表名列表<span class="token keyword">where</span>条件列表<span class="token keyword">group</span> <span class="token keyword">by</span>分组字段<span class="token keyword">having</span>分组后条件<span class="token keyword">order</span> <span class="token keyword">by</span>排序字段<span class="token keyword">limit</span>分页限定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h5><ol><li><p>查询多个字段</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 查询所有列的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>去除重复记录</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> 字段列表 <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>起别名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">as</span><span class="token comment">-- as也能省略</span><span class="token keyword">select</span> name <span class="token keyword">as</span> 姓名<span class="token punctuation">,</span>math 数学成绩<span class="token punctuation">,</span>english 英语成绩 <span class="token keyword">from</span> stu<span class="token punctuation">;</span><span class="token comment">-- 案例</span><span class="token keyword">select</span> name <span class="token keyword">as</span> 姓名<span class="token punctuation">,</span>math <span class="token keyword">as</span> 数学成绩<span class="token punctuation">,</span>english <span class="token keyword">as</span> 英语成绩 <span class="token keyword">from</span> stu<span class="token punctuation">;</span><span class="token comment">-- 案例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><p>条件查询语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 条件列表<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>条件</p><p><img src="/2022/12/24/SQL/image-20221223141619216.png" alt="image-20221223141619216"></p><p>注意：</p><ol><li>与<code>Java</code>不同的是等号是<code>=</code>而不是<code>==</code></li><li><code>Null</code>不能使用<code>=</code>而应该使用<code>is</code>或<code>is not</code></li><li><code>&amp;&amp;</code> 和and通用，<code>||</code>与<code>or</code>通用</li><li><code>like</code>模糊查询中下划线<code>_</code>代表单个任意字符，<code>%</code>代表多个任意字符（可以是0个）</li></ol><h5 id="排序查找"><a href="#排序查找" class="headerlink" title="排序查找"></a>排序查找</h5><p>排序查找语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名 <span class="token keyword">order</span> <span class="token keyword">by</span> 排序字段名<span class="token number">1</span> 排序方式<span class="token number">1</span><span class="token punctuation">,</span>排序字段名<span class="token number">2</span> 排序方式<span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>排序方式：</p><p><code>ASC</code>：升序排列（默认值）</p><p><code>DESC</code>：降序排列</p><p>如果有多个排序条件，当前边的条件值一样时，才会根据第二条件进行排序</p><h5 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h5><p>概念：将一列数据作为一个整体，进行纵向计算</p><p>分类：</p><p><img src="/2022/12/24/SQL/image-20221223145917613.png" alt="image-20221223145917613"></p><p>语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 聚合函数名<span class="token punctuation">(</span>列名<span class="token punctuation">)</span> <span class="token keyword">from</span> 表<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ol><li><code>null</code>值不参与所有聚合函数运算</li><li><code>count</code>一般使用<code>*</code>，新版<code>mysql</code>中会自动选择速度最快的一列进行计算</li></ol><h5 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h5><p>分组查询语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 分组前条件限定 <span class="token keyword">group</span> <span class="token keyword">by</span> 分组字段名 <span class="token keyword">having</span> 分组后条件过滤<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：分组之后查询的字段为聚合函数和分组字段，查询其他字段无任何意义（比如求男女平均成绩还去查姓名就无意义）</p><p><code>where</code>和<code>having</code>的区别：</p><ol><li>执行的时机不一样：<code>where</code>是分组前，而<code>having</code>是分组之后对结果进行过滤</li><li>可判断的条件不一样：<code>where</code>不能对聚合函数进行判断，<code>having</code>可以</li><li>执行顺序：<code>where</code> &gt; <code>聚合函数</code> &gt; <code>having</code></li></ol><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><p>分页查询语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名 <span class="token keyword">limit</span> 起始索引<span class="token punctuation">,</span>查询条目数<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ol><li>起始索引&#x3D;（当前页面-1）*每页显示的条数</li><li><code>MySQL</code>使用<code>limit</code>，<code>Oracle</code>使用<code>rownumber</code>，<code>SQL Server</code>使用<code>top</code></li></ol><h3 id="六、约束"><a href="#六、约束" class="headerlink" title="六、约束"></a>六、约束</h3><h5 id="约束的分类"><a href="#约束的分类" class="headerlink" title="约束的分类"></a>约束的分类</h5><p><img src="/2022/12/24/SQL/image-20221223194603715.png" alt="image-20221223194603715"></p><p>注意：</p><ol><li><code>MySQL</code>在<code>8.0.16</code>版本以前不支持检查约束</li><li>Null也是个值，不算空</li><li><code>primary key auto_increment</code>主键且自增长：数字类型</li></ol><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><p>创建表时添加：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span><span class="token comment">-- 主键且自增长</span>    ename <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">unique</span><span class="token punctuation">,</span><span class="token comment">-- 非空且唯一</span>    joindate <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token comment">-- 非空</span>    salary <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token comment">-- 非空</span>    bonus <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token comment">-- 默认0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建完表后添加</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 字段名 数据类型 约束类型<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除约束</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 字段名 数据类型<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h5><p>从表—–&gt;主表（例：员工—–&gt;部门），并且要先创建主表</p><p>语法：</p><ol><li><p>创建表时添加外键约束</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>列名 数据类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">constraint</span> 外键名称 <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>外键列名<span class="token punctuation">)</span> reference 主表<span class="token punctuation">(</span>主表列名<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>建完表后添加外键约束</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">constraint</span> 外键名称 <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>外键列名<span class="token punctuation">)</span> reference 主表<span class="token punctuation">(</span>主表列名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除约束</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> 外键名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="七、多表查询"><a href="#七、多表查询" class="headerlink" title="七、多表查询"></a>七、多表查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept<span class="token punctuation">;</span><span class="token comment">-- 案例</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若emp有4条数据，dept有6条数据则会查询到24条数据</p><p>笛卡尔积：有A，B两个集合，取A，B所有的组合情况</p><p>添加条件可以消除无效数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>dep_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>did<span class="token punctuation">;</span><span class="token comment">-- 案例（内连接）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h5><p><img src="/2022/12/24/SQL/image-20221224204450731.png" alt="image-20221224204450731"></p><ul><li><p>内连接：相当于查询A B交集数据</p><p><img src="/2022/12/24/SQL/image-20221224204511056.png" alt="image-20221224204511056"></p><ul><li>查询语法：</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span><span class="token punctuation">,</span>表<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> 条件<span class="token punctuation">;</span><span class="token comment">-- 隐式内连接</span><span class="token comment">-- 可以在表后面给表起别名：from 表1 别名1,表2 别名2</span><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span> <span class="token keyword">inner</span> <span class="token keyword">join</span> 表<span class="token number">2</span> <span class="token keyword">on</span> 条件<span class="token punctuation">;</span><span class="token comment">-- 显示内连接（inner可以省略）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>外连接：</p><ul><li><p>左外连接：相当于查询A表所有数据和交集部分数据</p><p><img src="/2022/12/24/SQL/image-20221224204546490.png" alt="image-20221224204546490"></p><ul><li>查询语法：</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span> <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> 表<span class="token number">2</span> <span class="token keyword">on</span> 条件<span class="token punctuation">;</span><span class="token comment">-- outer可以省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>右外连接：相当于查询B表所有数据和交集部分数据</p><p><img src="/2022/12/24/SQL/image-20221224204618823.png" alt="image-20221224204618823"></p><ul><li>查询语法：</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span> <span class="token keyword">right</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> 表<span class="token number">2</span> <span class="token keyword">on</span> 条件<span class="token punctuation">;</span><span class="token comment">-- outer可以省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><p>查询中嵌套查询</p><p>案例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询工资高于猪八戒的员工信息</span><span class="token keyword">select</span> salary <span class="token keyword">from</span> emp <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">;</span><span class="token comment">-- 得3600</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> salary <span class="token operator">></span> <span class="token number">3600</span><span class="token punctuation">;</span><span class="token comment">-- 查询大于3600</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过子查询可以合并为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> salary <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> salary <span class="token keyword">from</span> emp <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询语法</p><ul><li><p>单行单列：作为条件值，使用<code>=</code> <code>!=</code> <code>&gt;</code> <code>&lt;</code>等进行条件判断</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表 <span class="token keyword">where</span> 字段名 <span class="token operator">=</span> <span class="token punctuation">(</span>子查询<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>多行单列：作为条件值，使用in等关键字进行条件判断</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表 <span class="token keyword">where</span> 字段名 <span class="token operator">in</span> <span class="token punctuation">(</span>子查询<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>多行多列：作为虚拟表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> <span class="token punctuation">(</span>子查询<span class="token punctuation">)</span> <span class="token keyword">where</span> 条件<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="八、事务"><a href="#八、事务" class="headerlink" title="八、事务"></a>八、事务</h3><p>要么同时成功，要么同时失败</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><ul><li><p>开启事务（两种皆可）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>提交事务</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">commit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>回滚事务</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">rollback</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="自动提交"><a href="#自动提交" class="headerlink" title="自动提交"></a>自动提交</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> @<span class="token variable">@autocommit</span><span class="token punctuation">;</span><span class="token keyword">set</span> @<span class="token variable">@autocommit</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- 1自动提交，0手动提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="四大特征（ACID）"><a href="#四大特征（ACID）" class="headerlink" title="四大特征（ACID）"></a>四大特征（ACID）</h5><ul><li><p>原子性（Atomicity）：事务是不可分割的最小操作单位，要么同时成功，要么同时失败</p></li><li><p>一致性（Consistency） ：事务完成时，必须使所有的数据都保持一致状态</p></li><li><p>隔离性（Isolation）：多个事务之间，操作的可见性</p></li><li><p>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL、Navicat安装</title>
      <link href="/2022/12/21/MySQL%E3%80%81Navicat%E5%AE%89%E8%A3%85/"/>
      <url>/2022/12/21/MySQL%E3%80%81Navicat%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="一、下载、解压MySQL安装包"><a href="#一、下载、解压MySQL安装包" class="headerlink" title="一、下载、解压MySQL安装包"></a>一、下载、解压MySQL安装包</h3><p>官网下载地址：<code>https://dev.mysql.com/downloads/mysql/</code></p><p><img src="/2022/12/21/MySQL%E3%80%81Navicat%E5%AE%89%E8%A3%85/image-20221221104431777.png" alt="image-20221221104431777"></p><p>下载完解压到<code>C:\MySQL\mysql-5.7.24-winx64</code></p><p>配置<code>MySQL</code>环境变量，<code>系统变量---&gt;新建----&gt;变量名为MYSQL_HOME</code>,变量值为你的路径名</p><p>我的变量值是：<code>C:\MySQL\mysql-5.7.24-winx64</code></p><p>然后更改Path环境变量，新增量为：<code>%MYSQL_HOME%\bin</code></p><h3 id="二、my-ini文件"><a href="#二、my-ini文件" class="headerlink" title="二、my.ini文件"></a>二、my.ini文件</h3><p>在解压后的根目录新建一个<code>my.ini</code>文件</p><p>文件内容如下</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysql</span><span class="token punctuation">]</span></span><span class="token comment"># 设置mysql客户端默认字符集</span><span class="token key attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span> <span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span><span class="token comment">#设置3306端口</span><span class="token key attr-name">port</span> <span class="token punctuation">=</span> <span class="token value attr-value">3306</span> <span class="token comment"># 设置mysql的安装目录</span><span class="token key attr-name">basedir</span><span class="token punctuation">=</span><span class="token value attr-value">C:\MySQL\mysql-5.7.24-winx64</span><span class="token comment"># 设置mysql数据库的数据的存放目录</span><span class="token key attr-name">datadir</span><span class="token punctuation">=</span><span class="token value attr-value">C:\MySQL\mysql-5.7.24-winx64\data</span><span class="token comment"># 允许最大连接数</span><span class="token key attr-name">max_connections</span><span class="token punctuation">=</span><span class="token value attr-value">200</span><span class="token comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><span class="token key attr-name">character-set-server</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span><span class="token comment"># 创建新表时将使用的默认存储引擎</span><span class="token key attr-name">default-storage-engine</span><span class="token punctuation">=</span><span class="token value attr-value">INNODB</span>skip-grant-tables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、安装MySQL服务及初始化"><a href="#三、安装MySQL服务及初始化" class="headerlink" title="三、安装MySQL服务及初始化"></a>三、安装MySQL服务及初始化</h3><p>以管理员身份运行<code>cmd</code>分别执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysqld <span class="token function">install</span>mysqld <span class="token parameter variable">--initialize</span>net start mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="四、登录MySQL、修改密码"><a href="#四、登录MySQL、修改密码" class="headerlink" title="四、登录MySQL、修改密码"></a>四、登录MySQL、修改密码</h3><p>执行<code>mysql -u root -p</code>后提示输入密码</p><p>直接回车，因为刚刚的<code>my.ini</code>最后一行的意思就是跳过密码直接登录</p><p>输入以下命令修改密码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">set</span> authentication_string<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到此<code>MySQL</code>就安装完毕了…</p><p>第一次登入可能需要修改一次密码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">user</span> ‘root’@‘loaclhost’ identified <span class="token keyword">by</span> ‘<span class="token number">654321</span>’<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外，退出命令如下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">exit</span>quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="五、安装Navicat"><a href="#五、安装Navicat" class="headerlink" title="五、安装Navicat"></a>五、安装Navicat</h3><p>参考<a href="https://blog.csdn.net/weixin_35724834/article/details/90052994?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167168388916800182766279%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167168388916800182766279&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-90052994-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_control2&utm_term=navicat%20premium12%E7%A0%B4%E8%A7%A3&spm=1018.2226.3001.4187">Navicat Premium 12安装教程</a>…</p>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java SE自学笔记（一）</title>
      <link href="/2022/11/13/Java%20SE%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/11/13/Java%20SE%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>边学边记…</p><p>具体要学习的知识如下</p><ul><li>类变量和类方法</li><li>理解main方法语法</li><li>代码块</li><li>单例设计模式</li><li>final关键字</li><li>抽象类</li><li>接口</li><li>内部类</li></ul><h3 id="一、类变量"><a href="#一、类变量" class="headerlink" title="一、类变量"></a>一、类变量</h3><h5 id="什么是类变量"><a href="#什么是类变量" class="headerlink" title="什么是类变量"></a>什么是类变量</h5><p>类变量也叫静态变量&#x2F;静态属性，是该类的所有对象共享的变量，任何一个该类的对象去访问它时，取到的都是相同的值，同样任何一个该类的对象去修改它时，修改的也是同一个变量。</p><p>…</p><p>下面来看一段代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//定义一个变量count，是一个类变量（静态变量），被Child类的所有对象实例共享</span>    <span class="token keyword">public</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">" 加入了游戏.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态域因<code>jdk</code>版本不同，可能存放在堆里，也有可能在方法区里</p><p>但可以肯定的是，静态变量被所有对象共享，而且在类加载的时候就生成了（new的时候加载一次，且只加载一次）</p><p>关于上面代码里的<code>count</code>变量，也就是<code>static</code>变量</p><p>在<code>jdk8</code>以前，会认为是在这个方法区里面，但<code>jdk8</code>以后静态域放在了堆里面</p><p>当类被加载的时候，会在堆里生成一个<code>class</code>对象，而<code>static</code>变量就被保存在<code>class</code>实例的尾部，所以认为静态变量在堆里面</p><p>这里顺便提一句，局部变量在使用完之后内存会被释放，但静态变量会保留内存，直到程序结束</p><h5 id="访问类变量"><a href="#访问类变量" class="headerlink" title="访问类变量"></a>访问类变量</h5><ul><li>类名.类变量名</li><li>对象名.类变量名</li></ul><p>这里更推荐使用前者，看起来更规范一些</p><p>而实例变量不能通过前者访问</p><p>因为类变量随着类的加载而创建，所以没有创建对象实例也可访问类变量</p><p>因此，类变量的生命周期是随类的加载开始，随着类消亡而销毁</p><p>同时，类变量的访问也要遵守修饰符的访问权限，和普通属性是一样的</p><h5 id="什么时候需要用类变量"><a href="#什么时候需要用类变量" class="headerlink" title="什么时候需要用类变量"></a>什么时候需要用类变量</h5><p>当我们需要让某个类的所有对象都共享一个变量时，就可以考虑使用类变量</p><p>例如：定义学生类，统计所有学生共交多少钱</p><h5 id="类变量与实例变量（普通变量）的区别"><a href="#类变量与实例变量（普通变量）的区别" class="headerlink" title="类变量与实例变量（普通变量）的区别"></a>类变量与实例变量（普通变量）的区别</h5><p>类变量是该类的所有对象共享的，而实例变量是每个对象独享的</p><p>加上<code>static</code>的变量称为类变量或静态变量，否则称为实例变量&#x2F;普通变量&#x2F;非静态变量</p><p>类变量就先记录这么多吧…</p><h3 id="二、类方法"><a href="#二、类方法" class="headerlink" title="二、类方法"></a>二、类方法</h3><p>类方法也叫静态方法</p><p>当方法使用了<code>static</code>修饰后，该方法就是静态方法，静态方法就可以访问静态属性&#x2F;变量</p><p>静态方法不能调用非静态变量</p><p>形式如下：</p><ul><li>访问修饰符 static 数据返回类型 方法名(){}</li><li>static 访问修饰符 数据返回类型 方法(){}</li></ul><p>这里也是为了规范，推荐使用前者</p><h5 id="类方法的调用"><a href="#类方法的调用" class="headerlink" title="类方法的调用"></a>类方法的调用</h5><ul><li>类名.类方法名</li><li>对象名.类方法名</li></ul><p>跟前面的类变量一样，要满足访问修饰符的访问权限和范围</p><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p>我们可以发现在工具类中提供的方法基本都是静态方法</p><p>当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法，提高开发效率。</p><p>在开放中往往将一些通用的方法，设计成静态方法，这样我们不需要创建对象就可以使用了，比如打印一维数组，冒泡排序，完成某个计算任务等…</p><p>如果我们希望不创建实例，也可以调用某个方法，这时候静态方法就是一个很好的使用场景</p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>类方法也和类变量一致，随着类的加载而加载，将结构信息存储在方法区</li><li>类方法中无<code>this</code>的参数，而普通方法中隐含着<code>this</code>的参数</li><li>类方法可以通过类名调用，也可以通过对象名调用，不能通过类名调用</li><li>类方法中不允许使用和对象有关的关键字，比如<code>this</code>和<code>super</code>。但普通方法可以使用</li><li>类方法（静态方法）中只能访问静态变量和静态方法，但普通方法即可以访问普通变量和方法，也可以访问静态变量和方法（但必须遵守访问权限）</li></ul><h3 id="三、理解main方法语法"><a href="#三、理解main方法语法" class="headerlink" title="三、理解main方法语法"></a>三、理解main方法语法</h3><h5 id="深入理解main方法"><a href="#深入理解main方法" class="headerlink" title="深入理解main方法"></a>深入理解main方法</h5><p>解释<code>main</code>方法的形式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><code>main</code>方法时虚拟机调用的</li><li>Java虚拟机需要调用类的<code>main()</code>方法，所以该方法的访问权限必须是<code>public</code></li><li>Java虚拟机在执行<code>main()</code>方法时不必创建对象，所以该方法必须是<code>static</code></li><li>该方法接收<code>String</code>类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数</li><li>main的形参，就是把<code>Java 运行的类名 参数1 参数2 参数3</code>中最后面的参数形成一个数组带进去，而且可以在主方法里再取出来</li></ol><p>同上面的类方法，在<code>main()</code>方法中，我们可以直接调用<code>main()</code>方法所在类的静态方法或静态属性，但是，不能直接访问该类的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员</p><h5 id="main动态传值"><a href="#main动态传值" class="headerlink" title="main动态传值"></a>main动态传值</h5><p>刚刚上面讲的<code>Java 运行的类名 参数1 参数2 参数3</code>是在命令行中的传值方法</p><p>下面我们用下面这段代码来说一下idea里怎么进行传递参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"args["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在idea右上角选择<code>Edit Configurations</code></p><p><img src="/2022/11/13/Java%20SE%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20221112150649553.png" alt="image-20221112150649553"></p><p>在<code>Program arguments</code>里写入参数即可</p><p><img src="/2022/11/13/Java%20SE%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20221112150845084.png" alt="image-20221112150845084"></p><p>如图，这里我们传入<code>杭州 宁波 温州</code>看看效果</p><p><img src="/2022/11/13/Java%20SE%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20221112151018475.png" alt="image-20221112151018475"></p><p>运行后可以看到我们成功传入了参数</p><p><img src="/2022/11/13/Java%20SE%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20221112151111789.png" alt="image-20221112151111789"></p><p>main方法就到这…</p><h3 id="四、代码块"><a href="#四、代码块" class="headerlink" title="四、代码块"></a>四、代码块</h3><h5 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h5><p>代码块又称为初始化块，属于类中的成员[即 是类的一部分]，类似于方法，将逻辑语句封装在方法体中，通过<code>&#123;&#125;</code>包围起来。</p><p>但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显式调用，而是加载类时，或创建对象时隐式调用。</p><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>代码<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>语法说明：</p><ol><li>修饰符可选，要写的话，也只能写<code>static</code></li><li>代码块分为两类，使用<code>static</code>修饰的叫静态代码块，没有<code>static</code>修饰的，叫普通代码块</li><li>逻辑语句可以为任何逻辑语句（输入、输出、方法调用、循环、判断等）</li><li><code>;</code>号可以写上，也可以省略</li></ol><p>代码块的好处：</p><ol><li>相当于另外一种形式的构造器（对构造器的补充机制），可以做初始化的操作，顺序优先于构造器</li><li>如果多个构造器中都有重复的语句，可以抽取到初始化块中，提高代码的重用性</li></ol><h5 id="细节（重点）"><a href="#细节（重点）" class="headerlink" title="细节（重点）"></a>细节（重点）</h5><ol><li><p>static代码块也叫静态代码块，作用就是对类进行初始化，而且它随着类的加载而执行，并且只会执行一次。如果是普通代码块，每创建一个对象，就执行。</p></li><li><p>类什么时候被加载</p><p>①创建对象实例时（new）</p><p>②创建子类对象实例，父类也会被加载</p><p>③使用类的静态成员时（静态属性、静态方法）</p></li><li><p>普通的代码块，在创建对象实例时，会被隐式的调用。被创建一次，就会调用一次。如果只是使用类的静态成员时，普通代码块并不会执行</p></li><li><p>静态代码块和静态属性初始化的优先级一样，按他们定义的顺序调用，普通代码块和普通属性初始化的优先级也一样，但是会先调用静态，其次按他们定义的顺序调用，最后调用构造器，总结一下就是静态&gt;普通&gt;构造器</p></li><li><p>构造器的最前面其实隐含了super()和调用普通代码块（先父类按顺序，再子类按顺序）</p></li><li><p>调用顺序</p><p>①父类的静态代码块和静态属性（优先级一样，按定义顺序执行）</p><p>②子类的静态代码块和静态属性（优先级一样，按定义顺序执行）</p><p>③父类的普通代码块和普通属性初始化（优先级一样，按定义顺序执行）</p><p>④父类的构造方法</p><p>⑤子类的普通代码块和普通属性初始化（优先级一样，按定义顺序执行）</p><p>⑥子类的构造方法</p></li><li><p>静态代码块只能直接调用静态成员（静态属性和静态方法），普通代码块可以调用任意成员</p></li></ol><h3 id="五、单例设计模式"><a href="#五、单例设计模式" class="headerlink" title="五、单例设计模式"></a>五、单例设计模式</h3><h5 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h5><ol><li>静态方法和属性的经典使用</li><li>设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格、以及解决问题的思考方式</li></ol><h5 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h5><ol><li><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法</p></li><li><p>单例模式有两种方式：</p><p>①饿汉式</p><p>②懒汉式</p></li></ol><h5 id="单例模式应用实例-饿汉式"><a href="#单例模式应用实例-饿汉式" class="headerlink" title="单例模式应用实例-饿汉式"></a>单例模式应用实例-饿汉式</h5><p>实现步骤</p><ol><li>构造器私有化&#x3D;&#x3D;&gt;防止直接<code>new</code></li><li>类的内部创建静态对象</li><li>向外暴露一个静态的公共方法 <code>getInstance</code></li><li>代码实现</li></ol><p>这里解释一下，之所以要将<code>getInstance</code>方法设置为静态方法，是因为避免去new一个对象，那又因为要让<code>getInstance</code>这个静态方法能够使用到类内部创建的对象，所以需要将对象设置为静态的</p><p>下面看一下具体的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GirlFriend</span> instance <span class="token operator">=</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GirlFriend</span> instance2 <span class="token operator">=</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token operator">==</span>instance2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//可以看到两次获取到的都是同一对象</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">GirlFriend</span> tank<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token string">"Tank"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//类的内部创建静态对象</span>    <span class="token keyword">private</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//构造器私有化</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">GirlFriend</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//向外暴露一个静态的公共方法</span>        <span class="token keyword">return</span> tank<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"GirlFriend&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h5><p>为什么叫饿汉式？</p><p>因为不管你有没有使用这个对象，它都已经帮你创建好了一个对象，所以叫饿汉式…相反，不去用它，它就不会创建，被称为懒汉式…</p><h5 id="单例模式应用实例-懒汉式"><a href="#单例模式应用实例-懒汉式" class="headerlink" title="单例模式应用实例-懒汉式"></a>单例模式应用实例-懒汉式</h5><p>饿汉式不使用对象却也会创建对象，造成了一种资源的浪费，而懒汉式就解决了这一个问题</p><p>实现步骤</p><ol><li>仍然构造器私有化</li><li>定义一个<code>static</code>静态属性对象</li><li>提供一个<code>public</code>的<code>static</code>方法，可以返回一个Cat对象</li><li>懒汉式，只有当用户使用<code>getInstance</code>时，才返回cat对象，从而再次调用时，会返回上次创建的Cat对象</li></ol><p>从而保证了单例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Cat</span> instance<span class="token operator">=</span><span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Cat</span> instance2<span class="token operator">=</span><span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> n1<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器被调用..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Cat</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cat<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果对象还未创建，则创建一个</span>            cat<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"小可爱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cat<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="总结单例设计模式"><a href="#总结单例设计模式" class="headerlink" title="总结单例设计模式"></a>总结单例设计模式</h5><p>饿汉式VS懒汉式</p><ol><li>最主要的区别就是创建的时机不同，饿汉式在类加载就创建了对象实例，而懒汉式是在使用时才创建</li><li>饿汉式不存在线程安全问题，懒汉式存在线程安全问题（后续介绍）</li><li>饿汉式存在浪费资源的可能</li><li>在<code>javaSE</code>标准类中，<code>java.lang.Runtime</code>就是经典的单例模式</li></ol><h3 id="六、final关键字"><a href="#六、final关键字" class="headerlink" title="六、final关键字"></a>六、final关键字</h3><h5 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h5><p>final可以修饰类、属性、方法和局部变量</p><h5 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h5><ol><li><p>当不希望类被继承时，可以用<code>final</code>修饰</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//在不想被继承的类前加final</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//此处会报错，无法继承A类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>当不希望父类的某个方法被子类覆盖&#x2F;重写时，可以用<code>final</code>关键字修饰</p><p>具体格式为<code>访问修饰符 final 返回类型 方法名</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//这里使用final修饰方法</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">extends</span> <span class="token class-name">C</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//此处会报错，只能继承但不能重写C类的hi方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重写C类的hi方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当不希望类的某个属性的值被修改，可以使用<code>final</code>修饰</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Final01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">E</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span>n1<span class="token operator">=</span><span class="token number">888</span><span class="token punctuation">;</span><span class="token comment">//报错，无法修改</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">E</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> n1<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span><span class="token comment">//这里用final修饰变量</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当不希望某个局部变量被修改，可以用<code>final</code>修饰</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">F</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token class-name">Num</span><span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">;</span><span class="token comment">//finall修饰局部变量</span>        <span class="token class-name">Num</span><span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">;</span><span class="token comment">//报错，无法修改</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Num= "</span><span class="token operator">+</span><span class="token class-name">Num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ol><li><p><code>final</code>修饰的属性又叫常量，一般用 <code>XX_XX_XX</code>来命名</p></li><li><p><code>final</code>修饰的属性在定义时，必须赋初值，并且以后不能再修改，赋值可以在如下位置之一</p><p>①定义时：如<code>public final double TAX_RATE=0.08;</code></p><p>②在构造器中</p><p>③在代码块中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">TAX_RATE</span><span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">;</span><span class="token comment">//第一种</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">TAX_RATE2</span><span class="token punctuation">;</span><span class="token comment">//第二种</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">TAX_RATE3</span><span class="token punctuation">;</span><span class="token comment">//第三种</span><span class="token keyword">public</span> <span class="token function">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//第二种：在构造器中赋初值</span>    <span class="token constant">TAX_RATE2</span><span class="token operator">=</span><span class="token number">1.1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token comment">//第三种：在代码块中赋初值</span>    <span class="token constant">TAX_RATE3</span><span class="token operator">=</span><span class="token number">2.2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果<code>final</code>修饰的属性是静态的，则初始化的位置只能是</p><p>①定义时</p><p>②在静态代码块，不能再构造器中赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">TAX_RATE</span><span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">TAX_RATE2</span><span class="token punctuation">;</span><span class="token comment">//报错</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">TAX_RATE3</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">BB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token constant">TAX_RATE2</span><span class="token operator">=</span><span class="token number">1.1</span><span class="token punctuation">;</span><span class="token comment">//构造器不能赋值（静态）</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span>    <span class="token constant">TAX_RATE3</span><span class="token operator">=</span><span class="token number">2.2</span><span class="token punctuation">;</span><span class="token comment">//静态代码块可以赋值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>final</code>类不能继承，但是可以实例化对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalDetail01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CC</span> cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实例化对象不会报错</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">CC</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//final类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果类不是final类，但是含有<code>final</code>方法，则该方法虽然不能重写，但是可以被继承</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalDetail01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">EE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以正常调用</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">DD</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//此处含有final方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cal()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">EE</span> <span class="token keyword">extends</span> <span class="token class-name">DD</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//可以继承DD</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一般来说，如果一个类已经是final类了，就没有必要再将方法修饰成final方法</p></li><li><p>final不能修饰构造方法（即构造器）</p></li><li><p>final和static往往搭配使用，效率更高，不会导致类加载，底层编译器做了优化处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">BBB</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出999和BBB被执行</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">BBB</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BBB 的静态代码块被执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">BBB</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//仅输出999</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">BBB</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BBB 的静态代码块被执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此句不输出</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>包装类（Integer，Double，Float，Boolean等都是final），String也是final类</p></li></ol><h3 id="七、抽象类"><a href="#七、抽象类" class="headerlink" title="七、抽象类"></a>七、抽象类</h3><h5 id="引入抽象类"><a href="#引入抽象类" class="headerlink" title="引入抽象类"></a>引入抽象类</h5><p>当父类的某些方法，需要声明，但是又不确定如何实现时，可以用<code>abstract</code>关键字来修饰方法，将其声明为抽象方法，那么这个类就是抽象类</p><h5 id="具体写法"><a href="#具体写法" class="headerlink" title="具体写法"></a>具体写法</h5><p>这里要注意，如果要将方法设为抽象方法，那么需要在类的前面也加上<code>abstract</code>，否则会报错，同时抽象方法没有方法体，否则会报错</p><p>具体格式为<code>访问修饰符 abstract 返回类型 方法名(参数列表);</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token comment">//类的前面加上abstract</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//抽象方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而且，抽象类一般来说会被继承，由其子类来实现抽象方法</p><h5 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h5><ol><li><p>抽象类不能被实例化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Abstract02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此处报错，不能实例化抽象类</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>抽象类不一定要包含<code>abstract</code>方法，换句话说，抽象类可以没有<code>abstract</code>方法，还可以有实现的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//用上面的代码来举例，此处并不会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一旦类包含了<code>abstract</code>方法，则这个类必须声明为<code>abstract</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错，因为包含了抽象方法，所以必须是抽象类</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>abstract</code>只能修饰类和方法，不能修饰属性和其他</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token comment">//报错，abstract只能修饰类和方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>抽象类可以有任意成员【抽象类本质还是类】，比如：非抽象方法、构造器、静态属性等等</p></li><li><p>抽象方法不能有主体，即不能实现（也就是开头所说的不能有方法体）</p></li><li><p>如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为<code>abstract</code>类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">F</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//这里继承了E抽象类，但没有实现所有的抽象方法，所以会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">F</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//那么我们在子类前加上abstract就不会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">G</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//所谓实现方法，就是要有方法体（空也可以）</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>抽象方法不能用private、final、static来修饰，因为这些关键字都是和重写相违背的</p></li></ol><h5 id="抽象模板设计"><a href="#抽象模板设计" class="headerlink" title="抽象模板设计"></a>抽象模板设计</h5><p>首先我们来看下面一段代码（分别在三个文件中）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTemplate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AA</span> aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        aa<span class="token punctuation">.</span><span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BB</span> bb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bb<span class="token punctuation">.</span><span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AA</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> start<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">800000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            num<span class="token operator">+=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> end<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行时间："</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BB</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> start<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">80000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            num<span class="token operator">*=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> end<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行时间："</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里提一句，<code>currentTimeMillis()</code>可以以毫秒为单位获取系统当前的时间，返回<code>long</code>数据类型的数据</p><p>我们发现，AA类和BB类有相当一部分是重复的，下面进行改进，体会一下抽象模板设计</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTemplate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AA</span> aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        aa<span class="token punctuation">.</span><span class="token function">calculateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BB</span> bb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bb<span class="token punctuation">.</span><span class="token function">calculateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Template</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calculateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> start<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//动态机制绑定到AA或BB的job执行</span>        <span class="token keyword">long</span> end<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务执行时间："</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AA</span> <span class="token keyword">extends</span> <span class="token class-name">Template</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//重写抽象类里的job</span>        <span class="token keyword">long</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">800000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            num<span class="token operator">+=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BB</span> <span class="token keyword">extends</span> <span class="token class-name">Template</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">////重写抽象类里的job</span>        <span class="token keyword">long</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">80000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            num<span class="token operator">*=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的实践可以看出来抽象类对代码的复用性和简洁性还是有很大帮助的…</p><h3 id="八、接口"><a href="#八、接口" class="headerlink" title="八、接口"></a>八、接口</h3><h5 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h5><p>看下面的代码模拟一下现实中的<code>USB</code>接口…</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Interface01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Camera</span> camera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Camera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Computer</span> computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        computer<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//把手机接入到计算机</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        computer<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span>camera<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//把相机接入到计算机</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UsbInterface</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//接口中abstract和public可以省略</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token keyword">implements</span> <span class="token class-name">UsbInterface</span><span class="token punctuation">&#123;</span> <span class="token comment">//Phone类实现了UsbInterface</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//实现UsbInterface接口规定/声明的方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机开始工作..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//实现UsbInterface接口规定/声明的方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机停止工作..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Camera</span> <span class="token keyword">implements</span> <span class="token class-name">UsbInterface</span><span class="token punctuation">&#123;</span> <span class="token comment">//Camera类实现了UsbInterface</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相机开始工作了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相机停止工作了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token class-name">UsbInterface</span> usbInterface<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//计算机工作</span>        usbInterface<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        usbInterface<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Phone</code>类实现了<code>UsbInterface</code>，即<code>Phone</code>类需要实现<code>UsbInterface</code>接口规定&#x2F;声明的方法</p><h5 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h5><p>接口就是给出一些没有实现的方法，封装到一起，到某个类要使用的时候，在根据具体情况把这些方法写出来。语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> 接口名<span class="token punctuation">&#123;</span><span class="token comment">//属性</span><span class="token comment">//方法（1.抽象方法 2.默认实现方法 3.静态方法）</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> 类名 <span class="token keyword">implements</span> 接口<span class="token punctuation">&#123;</span><span class="token comment">//自己属性</span><span class="token comment">//自己方法</span><span class="token comment">//必须实现接口的抽象方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在<code>JDK7.0</code>前，接口里的所有方法都没有方法体，即都是抽象方法。<code>JDK8.0</code>后接口可以有静态方法，默认方法，也就是说接口中可以有方法的具体实现</p><p>默认实现方法，需要使用<code>default</code>关键字修饰，如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">default</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><p>接口不能被实例化</p><p>接口中所有的方法是<code>public</code>方法，接口中抽象方法，可以不用<code>abstract</code>修饰</p><p>一个普通类实现接口，就必须将该接口的所有方法都实现</p><p>这里有一个快捷键，在下图报错的位置，使用<code>Alt+Enter</code>，选择<code>Implement methods</code>即可快速导入接口中所有要实现的方法</p><p><img src="/2022/11/13/Java%20SE%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20221120190852637.png" alt="image-20221120190852637"></p><p>抽象类实现接口，可以不用实现接口的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IA</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Tiger</span> <span class="token keyword">implements</span> <span class="token class-name">IA</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//不会报错，抽象类可以不实现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个类同时可以实现多个接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IB</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">IC</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Pig</span> <span class="token keyword">implements</span> <span class="token class-name">IB</span><span class="token punctuation">,</span><span class="token constant">IC</span><span class="token punctuation">&#123;</span><span class="token comment">//Pig类实现了IB和IC两个接口</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口中的属性，只能是<code>final</code>的，而且是<code>public static final</code>修饰符</p><p>接口中属性的访问形式：接口名.属性名</p><p>接口不能继承其他的类，但是可以继承多个别的接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IB</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">IC</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Pig</span> <span class="token keyword">implements</span> <span class="token class-name">IB</span><span class="token punctuation">,</span><span class="token constant">IC</span><span class="token punctuation">&#123;</span><span class="token comment">//同时实现了多个接口，用逗号分隔</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口的修饰符只能是public和默认，这点和类的修饰符是一样的</p><h5 id="接口和继承的区别"><a href="#接口和继承的区别" class="headerlink" title="接口和继承的区别"></a>接口和继承的区别</h5><p>继承的价值主要在于：解决代码的复用性和可维护性</p><p>接口的价值主要在于：设计，设计好各种规范（方法），让其它类去实现这些方法</p><p>子类继承了父类，就自动的拥有父类的功能，如果子类需要扩展功能，可以通过实现接口的方式扩展，可以理解实现接口是对 单继承机制的一种补充</p><p>继承是满足<code>is-a</code>的关系，而接口只需满足<code>like-a</code>的关系</p><p>接口在一定程度上实现了代码解耦，即：接口规范性+动态绑定机制</p><h5 id="接口的多态特性"><a href="#接口的多态特性" class="headerlink" title="接口的多态特性"></a>接口的多态特性</h5><p>多态参数，在前面的代码里<code>UsbInterface usb</code>，即可以接收手机对象，又可以接收相机对象，体现了借口多态，且接口类型的变量可以指向实现了接口的对象实例</p><p>多态数组，在Usb数组中，存放Phone和Camera对象，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterfacePolyArr</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Usb</span><span class="token punctuation">[</span><span class="token punctuation">]</span> usb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Usb</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        usb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Phone_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        usb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Camera_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以存放不同的对象</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> usb<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            usb<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//动态绑定机制</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>usb<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Phone_</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断运行类型是否一致</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Phone_</span><span class="token punctuation">)</span> usb<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Usb</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Phone_</span> <span class="token keyword">implements</span> <span class="token class-name">Usb</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机可以打电话..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机工作中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Camera_</span> <span class="token keyword">implements</span> <span class="token class-name">Usb</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相机工作中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多态传递，用下面的例子来说，如果<code>IG</code>继承了<code>IH</code>接口，而<code>Teacher</code>类实现了<code>IG</code>接口，那么，实际上就相当于<code>Teacher</code>类也实现了<code>IH</code>接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterfacePolyPass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">IG</span> ig<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IH</span> ih<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">IH</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">IG</span> <span class="token keyword">extends</span> <span class="token class-name">IH</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">implements</span> <span class="token class-name">IG</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、内部类"><a href="#九、内部类" class="headerlink" title="九、内部类"></a>九、内部类</h3><h5 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h5><p>一个类的内部又完整的嵌套了另一个类结构。被嵌套的类称为内部类，嵌套其他类的类称为外部类，内部类最大的特点就是可以直接访问私有属性，并且可以提现类与类之间的包含关系</p><p>基本语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span><span class="token comment">//外部类</span>    <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span><span class="token comment">//内部类</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Other</span><span class="token punctuation">&#123;</span><span class="token comment">//外部其他类</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h5><p>定义在外部类局部位置上（比如方法内）：</p><ol><li>局部内部类（有类名）</li><li>匿名内部类（没有类名）</li></ol><p>定义在外部类的成员位置上：</p><ol><li>成员内部类（没用static修饰）</li><li>静态内部类（使用static修饰）</li></ol><h5 id="局部内部类的使用"><a href="#局部内部类的使用" class="headerlink" title="局部内部类的使用"></a>局部内部类的使用</h5><ol><li><p>定义在外部类的局部位置，比如方法中，并且有类名</p></li><li><p>可以直接访问内外部类的所有成员，包含私有的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer02</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">class</span> <span class="token class-name">Inner02</span><span class="token punctuation">&#123;</span><span class="token comment">//局部内部类</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span><span class="token operator">+</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问了外部类的n1（私有属性）</span>                <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问了外部类的m2（私有方法）</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不能添加访问修饰符，因为它的地位就是一个局部变量，局部变量是不能使用修饰符的。但是可以使用final修，因为局部变量也可以使用final</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer02</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner02</span><span class="token punctuation">&#123;</span><span class="token comment">//报错，局部内部类不能添加访问修饰符</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer02</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Inner02</span><span class="token punctuation">&#123;</span><span class="token comment">//此处使用final修饰</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">class</span> <span class="token class-name">Inner03</span> <span class="token keyword">extends</span> <span class="token class-name">Inner02</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//报错，final修饰后无法继承</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>作用域：仅仅在定义它的方法或代码块中</p></li><li><p>局部内部类—访问—&gt;外部类的成员[访问方式：直接访问]</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer02</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">class</span> <span class="token class-name">Inner02</span><span class="token punctuation">&#123;</span><span class="token comment">//局部内部类</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span><span class="token operator">+</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问了外部类的n1（私有属性）</span>                <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问了外部类的m2（私有方法）</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>外部类—方法—&gt;局部内部类的成员[访问方式：创建对象，再访问(注意：必须在作用域内)]</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer02</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Inner02</span><span class="token punctuation">&#123;</span>  <span class="token comment">//局部内部类</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span><span class="token operator">+</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Inner02</span> inner02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先创建对象</span>        inner02<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再访问内部类的成员</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>外部其他类—不能访问—&gt;局部内部类（因为局部内部类地位是一个局部变量）</p></li><li><p>如果外部类和局部内部类的成员重名时，默认遵守就近原则，如果想访问外部类的成员，则可以使用（外部类名.this.成员）去访问</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer02</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Inner02</span><span class="token punctuation">&#123;</span>  <span class="token comment">//局部内部类</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> n1<span class="token operator">=</span><span class="token number">800</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span><span class="token operator">+</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出n1=800(内部类n1)</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span><span class="token operator">+</span><span class="token class-name">Outer02</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出n1=100(外部类n1)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>注意：</p><ol><li>局部内部类定义在方法中&#x2F;代码块</li><li>作用域在方法体或者代码块中</li><li>本质仍然是一个类</li></ol><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><p>匿名内部类是定义在外部类的局部位置，比如在方法中，并且没有类名</p><ol><li>本质是类</li><li>内部类</li><li>该类没有名字</li><li>同时还是一个对象</li></ol><p>基本语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> 类或接口<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>类体<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><p>匿名内部类既是一个类的定义，同时它本身也是一个对象，因此从语法上看，它既有定义类的特征。也有创建对象的特征。对前面代码分析可以看出这个特点，因此可以调用匿名内部类方法</p></li><li><p>可以直接访问外部类的所有成员，包含私有的</p></li><li><p>不能添加访问修饰符，因为它的地位就是一个局部变量</p></li><li><p>作用域仅仅在定义它的方法或代码块中</p></li><li><p>匿名内部类—访问—&gt;外部类成员[访问方式：直接访问]</p></li><li><p>外部其他类—不能访问—&gt;匿名内部类（因为匿名内部类是一个局部变量）</p></li><li><p>如果外部类和匿名内部类的成员重名时，匿名内部类去访问的话，默认遵循就近原则，如果想访问外部类成员，则可以使用（外部类名.this）去访问</p></li></ol><h5 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h5><ol><li><p>可以直接访问外部类所有成员，包括私有的</p></li><li><p>可以添加任意访问修饰符，因为它的地位就是一个成员</p></li><li><p>作用域和其它外部类的其它成员一样，为整个类体</p></li><li><p>外部成员访问成员内部类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 第一种方式 outer08.new Inner08()，相当于把new Inner08()当做是outer08成员</span><span class="token class-name">Outer08<span class="token punctuation">.</span>Inner08</span> inner08 <span class="token operator">=</span> outer08<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inner08<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第二种方式 在外部类中，编写一个方法，可以返回Inner08对象</span><span class="token class-name">Outer08<span class="token punctuation">.</span>Inner08</span> inner08Instance <span class="token operator">=</span> outer08<span class="token punctuation">.</span><span class="token function">getInner08Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inner08Instance<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h5><ol><li>与成员内部类基本相同，只不过增添一个static的前提</li><li>可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员</li></ol><p><code>2022年12月30日完结...</code></p>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>房屋出租项目-Java</title>
      <link href="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/"/>
      <url>/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/</url>
      
        <content type="html"><![CDATA[<p>第二个项目…应该比第一个复杂一点</p><p>一个一个功能逐步实现 [明确完成功能&#x3D;&gt;思路分析&#x3D;&gt;代码实现]</p><p>这次创建多个包，各司其职，再利用<code>HouseRentApp</code>来完成调用</p><p><img src="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/image-20221109195601840.png" alt="image-20221109195601840"></p><h3 id="一-需求说明"><a href="#一-需求说明" class="headerlink" title="一.需求说明"></a>一.需求说明</h3><p>对房屋信息的各种操作（添加、修改和删除），可以用数组实现</p><p>输出房屋明细表</p><p>主菜单界面如下</p><p><img src="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/image-20221109195655745.png" alt="image-20221109195655745"></p><h3 id="二、引入Utility工具类"><a href="#二、引入Utility工具类" class="headerlink" title="二、引入Utility工具类"></a>二、引入Utility工具类</h3><p>这里用了韩顺平老师的代码，使用<code>类.方法（）</code></p><p>因为当一个方法是<code>static</code>时，就是静态方法</p><p>静态方法可以直接通过类名调用</p><p>源码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">utils</span><span class="token punctuation">;</span><span class="token comment">/**工具类的作用:处理各种情况的用户输入，并且能够按照程序员的需求，得到用户的控制台输入。*/</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/***/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Utility</span> <span class="token punctuation">&#123;</span><span class="token comment">//静态属性。。。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 功能：读取键盘输入的一个菜单选项，值：1——5的范围     * @return 1——5     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">readMenuSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> c<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//包含一个字符的字符串</span>            c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将字符串转换成字符char类型</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token char">'1'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token char">'2'</span> <span class="token operator">&amp;&amp;</span>                 c <span class="token operator">!=</span> <span class="token char">'3'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token char">'4'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token char">'5'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"选择错误，请重新输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>         <span class="token comment">/**     * 功能：读取键盘输入的一个字符     * @return 一个字符     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//就是一个字符</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 功能：读取键盘输入的一个字符，如果直接按回车，则返回指定的默认值；否则返回输入的那个字符     * @param defaultValue 指定的默认值     * @return 默认值或输入的字符     */</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">readChar</span><span class="token punctuation">(</span><span class="token keyword">char</span> defaultValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//要么是空字符串，要么是一个字符</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> defaultValue <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * 功能：读取键盘输入的整型，长度小于2位     * @return 整数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一个整数，长度&lt;=10位</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将字符串转换成整数</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"数字输入错误，请重新输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 功能：读取键盘输入的 整数或默认值，如果直接回车，则返回默认值，否则返回输入的整数     * @param defaultValue 指定的默认值     * @return 整数或默认值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">readInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> defaultValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> defaultValue<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token comment">//异常处理...</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"数字输入错误，请重新输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>         <span class="token comment">/**     * 功能：读取键盘输入的指定长度的字符串     * @param limit 限制的长度     * @return 指定长度的字符串     */</span>         <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">readString</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span>limit<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>         <span class="token comment">/**     * 功能：读取键盘输入的指定长度的字符串或默认值，如果直接回车，返回默认值，否则返回字符串     * @param limit 限制的长度     * @param defaultValue 指定的默认值     * @return 指定长度的字符串     */</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">readString</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span>limit<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">?</span> defaultValue <span class="token operator">:</span> str<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">/** * 功能：读取键盘输入的确认选项，Y或N * 将小的功能，封装到一个方法中. * @return Y或N */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">readConfirmSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你的选择(Y/N): 请小心选择"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//无限循环</span>    <span class="token comment">//在这里，将接受到字符，转成了大写字母</span>    <span class="token comment">//y => Y n=>N</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'Y'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'N'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"选择错误，请重新输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">/** * 功能： 读取一个字符串 * @param limit 读取的长度 * @param blankReturn 如果为true ,表示 可以读空字符串。  *   如果为false表示 不能读空字符串。 *  *如果输入为空，或者输入大于limit的长度，就会提示重新输入。 * @return */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token keyword">boolean</span> blankReturn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义了字符串</span><span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">//scanner.hasNextLine() 判断有没有下一行</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        line <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取这一行</span>       <span class="token comment">//如果line.length=0, 即用户没有输入任何内容，直接回车</span><span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>blankReturn<span class="token punctuation">)</span> <span class="token keyword">return</span> line<span class="token punctuation">;</span><span class="token comment">//如果blankReturn=true,可以返回空串</span>            <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//如果blankReturn=false,不接受空串，必须输入内容</span>        <span class="token punctuation">&#125;</span> <span class="token comment">//如果用户输入的内容大于了 limit，就提示重写输入  </span><span class="token comment">//如果用户如的内容 >0 &lt;= limit ,我就接受</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> limit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"输入长度（不能大于"</span> <span class="token operator">+</span> limit <span class="token operator">+</span> <span class="token string">"）错误，请重新输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> line<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、完成domain类-x2F-数据层"><a href="#三、完成domain类-x2F-数据层" class="headerlink" title="三、完成domain类&#x2F;数据层"></a>三、完成domain类&#x2F;数据层</h3><p>一个<code>House</code>对象表示一个房屋信息</p><p><code>House</code>类有哪些属性，可以通过给出的界面分析得到</p><p>如下图</p><p><img src="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/image-20221109195916485.png" alt="image-20221109195916485"></p><p>即<code>编号</code> <code>房主</code> <code>电话</code> <code>地址</code> <code>月租</code> <code>状态（未出租/已出租）</code></p><p>在<code>House.java</code>中创建相应的属性，再创建构造器和<code>setter</code>，<code>getter</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> rent<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用快捷键<code>alt+insert</code>创建<code>toString</code>，根据界面重写<code>toString</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> id <span class="token operator">+</span>            <span class="token string">"\t\t"</span> <span class="token operator">+</span> name <span class="token operator">+</span>            <span class="token string">"\t"</span> <span class="token operator">+</span> phone <span class="token operator">+</span>            <span class="token string">"\t\t"</span> <span class="token operator">+</span> address <span class="token operator">+</span>            <span class="token string">"\t"</span> <span class="token operator">+</span> rent <span class="token operator">+</span>            <span class="token string">"\t"</span> <span class="token operator">+</span> state<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、完成View类-x2F-界面"><a href="#四、完成View类-x2F-界面" class="headerlink" title="四、完成View类&#x2F;界面"></a>四、完成View类&#x2F;界面</h3><p>功能说明：</p><p>用户打开软件，可以看到主菜单，可以退出软件</p><p>主菜单和上一个零钱通项目里的主菜单一致，我们这里也使用<code>do-while</code>循环和<code>loop</code>来控制进入和退出</p><p>直接上代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n=========房屋出租系统========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t1.新 增 房 源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t2.查 找 房 源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t3.删 除 房 屋 信 息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t4.修 改 房 屋 信 息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t5.房 屋 列 表"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t6.退      出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入你的选择（1-6）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    key <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token char">'1'</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'2'</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'3'</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'4'</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'5'</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'6'</span><span class="token operator">:</span>        loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们可以在<code>HouseRentApp</code>里调用这个<code>mainMeun</code>方法了</p><p>直接使用一行代码完成调用，不需要再去接收了，啰嗦且麻烦</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">HouseView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mainMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="五、完成service类-x2F-业务层"><a href="#五、完成service类-x2F-业务层" class="headerlink" title="五、完成service类&#x2F;业务层"></a>五、完成service类&#x2F;业务层</h3><p>响应<code>HouseView</code>的调用</p><p>完成对房屋信息的各种操作（增删改查&#x2F;crud）（用数组实现）</p><h5 id="新增房屋"><a href="#新增房屋" class="headerlink" title="新增房屋"></a>新增房屋</h5><p>定义<code>House[]</code>，保存<code>House</code>对象，顺便再初始化一个对象用于测试列表</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">House</span><span class="token punctuation">[</span><span class="token punctuation">]</span> houses<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">HouseService</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>houses<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>houses<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token string">"188"</span><span class="token punctuation">,</span><span class="token string">"杭电路"</span><span class="token punctuation">,</span><span class="token number">20000</span><span class="token punctuation">,</span><span class="token string">"已出租"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写<code>list()</code>用来返回所有房屋信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">House</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">lists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> houses<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<code>HouseView</code>中调用<code>list</code>输出房屋列表</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">HouseService</span> houseService <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HouseService</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========房屋列表========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"编号\t\t房主\t\t电话\t\t地址\t\t月租\t\t状态（未出租/已出租）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">House</span><span class="token punctuation">[</span><span class="token punctuation">]</span> houses <span class="token operator">=</span> houseService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> houses<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>houses<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//加入判断机制避免输出空的数组</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>houses<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//House类中toString重写生效</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========房屋列表显示完毕========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面来写添加房屋的功能</p><p>在<code>HouseView</code>中加入<code>addHouse</code>的方法，显示界面和接收输入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addhouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========添加房屋========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"姓名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"电话："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> phone <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"地址："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> address <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"月租："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rent <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"状态："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> state <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">House</span> newHouse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> address<span class="token punctuation">,</span> rent<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里发现了一个问题，添加的房屋需要编号…还有房屋是否添加成功的判断</p><p>所以我们再<code>HouseService</code>里又添加了两个属性，用来记录房屋个数和<code>ID</code>自增长</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> houseNums<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> idCounter<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后继续编写<code>add</code>方法用来判断房屋是否添加成功，返回<code>boolean</code>，同时更新新增房屋的编号</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">House</span> newHouse<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>houseNums <span class="token operator">==</span> houses<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房屋添加失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    houses<span class="token punctuation">[</span>houseNums<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>newHouse<span class="token punctuation">;</span>    newHouse<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token operator">++</span>idCounter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ID自增长</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后就可以在<code>addhouse</code>里调用<code>add</code>方法了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>houseService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newHouse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加房屋成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="删除房屋"><a href="#删除房屋" class="headerlink" title="删除房屋"></a>删除房屋</h5><p>在<code>HouseView</code>中编写<code>delHouse()</code>，用于显示界面和接收输入的需要删除的<code>ID</code></p><p>因为我们还没写del方法，所以先写个界面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delhouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========删除房屋========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入待删除房屋的编号（-1退出）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> delId <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>delId <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========放弃删除房屋信息========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>HouseService</code>中编写方法<code>del</code>，完成房屋删除任务，然后返回一个<code>boolean</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> delId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>houseNums<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delId<span class="token operator">==</span>houses<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            index<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//使用index记录i</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//说明delId在数组中不存在</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>index<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>houseNums<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         houses<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>houses<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    houses<span class="token punctuation">[</span><span class="token operator">--</span>houseNums<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//把原来存在的房屋信息的最后一个设置为null，并且房屋数减一</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里要注意不能忘记删除完后更新<code>houseNums</code>，如果高中学过技术，那么对下面采用覆盖的方式删除房屋信息可能能够更快地理解…</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>index<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>houseNums<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     houses<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>houses<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>至此我们就能在<code>HouseView</code>中调用<code>del</code>方法了，不过在这之前，我们先写个确认删除的功能</p><p>因为我们在最开始引入了韩老师的工具类，所以我们直接调用<code>readConfirmSelection()</code>即可</p><p>这里也放一下<code>readConfirmSelection()</code>方法的源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">readConfirmSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你的选择(Y/N): 请小心选择"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//无限循环</span>        <span class="token comment">//在这里，将接受到字符，转成了大写字母</span>        <span class="token comment">//y => Y n=>N</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'Y'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'N'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"选择错误，请重新输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确认的功能和调用<code>del</code>方法的代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> choice <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readConfirmSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token char">'Y'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//确认删除房屋</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>houseService<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>delId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========删除房屋信息成功========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========房屋编号不存在，删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========放弃删除房屋信息========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，删除房屋的功能就完成了</p><h5 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h5><p>这个没什么好说的，为了统一一下视觉效果，我们在<code>HouseView</code>里单独写一个<code>exit</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readConfirmSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token char">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        loop<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>switch</code>里调用就完事了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">case</span> <span class="token char">'6'</span><span class="token operator">:</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="查找功能"><a href="#查找功能" class="headerlink" title="查找功能"></a>查找功能</h5><p>在<code>HouseView</code>里编写<code>findHouse</code>方法，同上先编写界面的输出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========查找房屋信息========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入要查找的id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> findId <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后去编写要被调用的方法，我们取名为<code>findById</code></p><p>跟之前写的<code>add</code>、<code>del</code>也类似，找到返回<code>houses[i]</code>，没找到则返回空</p><p>比较简单，代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">House</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> findId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>houseNums<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>findId<span class="token operator">==</span>houses<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> houses<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后去<code>findHouse</code>里调用，逻辑还是比较清晰的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>house <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>house<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========查找房屋信息id不存在========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后不要忘了在<code>switch</code>里调用哈</p><p>写到这里已经0点了，但是只还剩下最后一个修改功能，那就写写完吧</p><h5 id="修改功能"><a href="#修改功能" class="headerlink" title="修改功能"></a>修改功能</h5><p>在<code>HouseView</code>里编写<code>update</code>方法</p><p>先接收个待修改房屋的编号，并且确定是否要修改</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========修改房屋信息========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请选择待修改房屋编号（-1表示退出）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> updateId <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>updateId <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========放弃修改房屋信息========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时也不要忘了验证编号是否存在</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">House</span> house <span class="token operator">=</span> houseService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>updateId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>house <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========修改房屋信息编号不存在========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就是输出+修改信息，代码有点长，但其实都是重复的</p><p>这里直接回车的话就认定为不修改，并且规定长度限制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"姓名("</span> <span class="token operator">+</span> house<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    house<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"电话("</span> <span class="token operator">+</span> house<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> phone <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    house<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"地址("</span> <span class="token operator">+</span> house<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> address <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    house<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"租金("</span> <span class="token operator">+</span> house<span class="token punctuation">.</span><span class="token function">getRent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> rent <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rent <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    house<span class="token punctuation">.</span><span class="token function">setRent</span><span class="token punctuation">(</span>rent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"状态("</span> <span class="token operator">+</span> house<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> state <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    house<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========修改房屋信息成功========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>房屋出租是我尝试的第二个项目，文章开头说比零钱通会复杂一点</p><p>好像是复杂了亿点…….</p><p>附图</p><p><img src="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/image-20221111004048722.png" alt="image-20221111004048722"></p><p><img src="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/image-20221111004121835.png" alt="image-20221111004121835"></p><p><img src="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/image-20221111004137063.png" alt="image-20221111004137063"></p><p><img src="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/image-20221111004150819.png" alt="image-20221111004150819"></p><p>不过能写完还是很开心的，上传完就睡觉了……附上现在的时间记录一下吧</p><p><img src="/2022/11/10/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E9%A1%B9%E7%9B%AE-Java/image-20221111003728524.png" alt="image-20221111003728524"></p>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java入门项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零钱通项目-Java</title>
      <link href="/2022/11/09/%E9%9B%B6%E9%92%B1%E9%80%9A%E9%A1%B9%E7%9B%AE-Java/"/>
      <url>/2022/11/09/%E9%9B%B6%E9%92%B1%E9%80%9A%E9%A1%B9%E7%9B%AE-Java/</url>
      
        <content type="html"><![CDATA[<p>这是我学Java这么久的第一个简单的小项目</p><p>为了能更好地了解OOP的好处，我先使用了面向过程进行了编写，然后再用面向对象重新再写一次</p><h3 id="一、零钱通项目需求"><a href="#一、零钱通项目需求" class="headerlink" title="一、零钱通项目需求"></a>一、零钱通项目需求</h3><p>具体界面如下图</p><p><img src="/2022/11/09/%E9%9B%B6%E9%92%B1%E9%80%9A%E9%A1%B9%E7%9B%AE-Java/image-20221109170656388.png" alt="image-20221109170656388"></p><p>一共包含4个功能</p><p><code>1.零钱通明细：可以查询入账+消费的流水</code></p><p><code>2.收益入账：对余额进行充值，输入金额，输出明细</code></p><p><code>3.消费：顾名思义就是花钱，输入用途和金额，输出明细，并且对金额进行验证，不能出现透支等情况</code></p><p><code>4.退出：写一个是否确认退出输入y/n的条件</code></p><p>如下图</p><p><img src="/2022/11/09/%E9%9B%B6%E9%92%B1%E9%80%9A%E9%A1%B9%E7%9B%AE-Java/image-20221109171009202.png" alt="image-20221109171009202"></p><h3 id="二、面向过程编写"><a href="#二、面向过程编写" class="headerlink" title="二、面向过程编写"></a>二、面向过程编写</h3><h5 id="创建一些基本的属性"><a href="#创建一些基本的属性" class="headerlink" title="创建一些基本的属性"></a>创建一些基本的属性</h5><p>因为刚入门所以采用比较简单的字符串拼接方法来显示流水</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Boolean</span> loop<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//判断是否退出程序</span><span class="token class-name">Scanner</span> sc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> key<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//接收数字选择菜单</span><span class="token class-name">String</span> details<span class="token operator">=</span><span class="token string">"---------------零钱通明细---------------\n"</span><span class="token punctuation">;</span><span class="token keyword">double</span> money<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//接收金额</span><span class="token keyword">double</span> balance<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//余额</span><span class="token class-name">String</span> note<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//消费用途</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为流水要显示日期，所以临时浅学了个<code>Data</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> date<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">SimpleDateFormat</span> sdf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//日期格式化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>写一个<code>do-while</code>来嵌套整个系统</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出主菜单并且获取用户选择<code>Key</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===============零钱通菜单==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t\t1 零钱通明细"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t\t2 收益入账"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t\t3 消费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t\t\t4 退    出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请选择(1-4):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>switch</code>语句来分别实现4个菜单选项的功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">"1"</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token string">"2"</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token string">"3"</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token string">"4"</span><span class="token operator">:</span>    <span class="token keyword">default</span><span class="token operator">:</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="功能1：零钱通明细"><a href="#功能1：零钱通明细" class="headerlink" title="功能1：零钱通明细"></a>功能1：零钱通明细</h5><p>因为采用字符串拼接所以明细相对简单，直接输出字符串<code>details</code>即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">case</span> <span class="token string">"1"</span><span class="token operator">:</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="功能2：收益入账"><a href="#功能2：收益入账" class="headerlink" title="功能2：收益入账"></a>功能2：收益入账</h5><p>虽然比较长但其实都是一些简单的功能，<code>if</code>用来判断充值是否为正数，主要就是<code>details</code>拼接的问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">case</span> <span class="token string">"2"</span><span class="token operator">:</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"收益入账金额:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    money<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//接收入账金额</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>money<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//金额验证是否有效</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入有误，请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"收益入账金额:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            money<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    balance<span class="token operator">+=</span>money<span class="token punctuation">;</span><span class="token comment">//余额计算</span>    date<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//时间获取</span>    details<span class="token operator">+=</span><span class="token string">"\n收益入账\t+"</span><span class="token operator">+</span>money<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>balance<span class="token punctuation">;</span><span class="token comment">//拼接字符串</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="功能3：消费"><a href="#功能3：消费" class="headerlink" title="功能3：消费"></a>功能3：消费</h5><p>其实功能3和功能2基本一致，复制过来加个用途就能套用，<code>if</code>判断条件改为判断余额够不够</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">case</span> <span class="token string">"3"</span><span class="token operator">:</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"消费用途:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    note<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"消费金额:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    money<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>money<span class="token operator">></span>balance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余额不足，请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"消费用途:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            note<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"消费金额:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            money<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    balance<span class="token operator">-=</span>money<span class="token punctuation">;</span>    date<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    details<span class="token operator">+=</span><span class="token string">"\n"</span><span class="token operator">+</span>note<span class="token operator">+</span><span class="token string">"\t-"</span><span class="token operator">+</span>money<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>balance<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="功能4：退出"><a href="#功能4：退出" class="headerlink" title="功能4：退出"></a>功能4：退出</h5><p>常规的退出，利用前面的<code>loop</code>来退出零钱通系统</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否确认退出，请输入y/n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>note<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>note<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        loop<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>note<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        loop<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入有误，请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        note<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="程序退出"><a href="#程序退出" class="headerlink" title="程序退出"></a>程序退出</h5><p>美观一点加一句退出项目</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========选择退出了零钱通项目==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三、面向对象编写"><a href="#三、面向对象编写" class="headerlink" title="三、面向对象编写"></a>三、面向对象编写</h3><p>下面用OOP来写，其实直接照搬就好了</p><h5 id="创建属性"><a href="#创建属性" class="headerlink" title="创建属性"></a>创建属性</h5><p>同样的创建属性就不用过多赘述了</p><h5 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h5><p>写了四个方法：</p><p><code>details：输出流水</code></p><p><code>income：本质就是功能2的代码，下同</code></p><p><code>pay：功能3</code></p><p><code>exit：功能4</code></p><p>这里要注意的一点是方法里的退出是<code>return</code>不是<code>break</code></p><p>所以稍加更改就可以使用了</p><h5 id="创建主类"><a href="#创建主类" class="headerlink" title="创建主类"></a>创建主类</h5><p>再创建一个主类<code>SmallchangeApp</code>，完成对<code>SmallChangeSysOOP</code>的调用即可</p><p><img src="/2022/11/09/%E9%9B%B6%E9%92%B1%E9%80%9A%E9%A1%B9%E7%9B%AE-Java/image-20221109174850541.png" alt="image-20221109174850541"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>OOP更加灵活，用方法来管理各个功能，更容易维护和拓展</p>]]></content>
      
      
      <categories>
          
          <category> Java项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java入门项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/2022/11/09/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/11/09/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="欢迎来到我的博客！这是我的第一篇文章"><a href="#欢迎来到我的博客！这是我的第一篇文章" class="headerlink" title="欢迎来到我的博客！这是我的第一篇文章"></a><strong>欢迎来到我的博客！这是我的第一篇文章</strong></h2><p>也没什么好说的，就记录一下我搭建博客的过程吧…</p><p>纯小白，看学长写的<a href="https://lcdzzz.github.io/2022/11/05/hexo-bo-ke-an-zhuang-jiao-cheng-tai-jiao-ji/">教程</a>一步步创建了Hexo博客，中间虽然出了很多的问题，不过最后都一个个百度解决了</p><h3 id="一、环境安装"><a href="#一、环境安装" class="headerlink" title="一、环境安装"></a>一、环境安装</h3><h5 id="安装git、Nodejs"><a href="#安装git、Nodejs" class="headerlink" title="安装git、Nodejs"></a>安装git、Nodejs</h5><p>用下面两条语句检查是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">-v</span><span class="token function">npm</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="安装cnpm-检查版本"><a href="#安装cnpm-检查版本" class="headerlink" title="安装cnpm,检查版本"></a>安装cnpm,检查版本</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cnpm <span class="token parameter variable">--registry</span><span class="token operator">=</span>http://registry.npm.taobao.orgcnpm <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h5><p>我第一次就是这里卡了导致后面博客加载不出来……..</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-clihexo <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="二、博客程序安装"><a href="#二、博客程序安装" class="headerlink" title="二、博客程序安装"></a>二、博客程序安装</h3><h5 id="连接Github"><a href="#连接Github" class="headerlink" title="连接Github"></a>连接Github</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"GitHub 用户名"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"GitHub 邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="创建ssh公钥秘钥"><a href="#创建ssh公钥秘钥" class="headerlink" title="创建ssh公钥秘钥"></a>创建ssh公钥秘钥</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"GitHub 邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将id_rsa.pub中的公钥添加到github的账号里</p><h5 id="用bash验证连接"><a href="#用bash验证连接" class="headerlink" title="用bash验证连接"></a>用bash验证连接</h5><p>这个地方我看的教程说会出现are you sure，但我验证的时候没出现，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里出现了个but还以为出了什么问题，搜了一圈发现没问题。。。</p><h5 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h5><p>Github的用户名+.github.io（必须要是这个）</p><h5 id="安装Hexo博客程序"><a href="#安装Hexo博客程序" class="headerlink" title="安装Hexo博客程序"></a>安装Hexo博客程序</h5><p>创建一个本地文件夹，在根目录右键bash</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里可能比较比较比较比较比较慢，因网而异吧</p><h5 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认端口4000，校园网的4000好像被占用了所以用<code>hexo server -p 5000</code>改端口号就行了</p><p>本地预览页<code>http://localhost:4000</code></p><h3 id="三、部署上传到Github"><a href="#三、部署上传到Github" class="headerlink" title="三、部署上传到Github"></a>三、部署上传到Github</h3><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 更改根目录_config.yml最后的地方</p><p>这里的分支我改成了main，之前用master好像上传不上去，但我不知道是不是分支的问题</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com/用户名/用户名.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里可能需要等一段时间，具体时间比较随缘</p><h5 id="至此你就可以通过下面的域名来访问自己的博客了"><a href="#至此你就可以通过下面的域名来访问自己的博客了" class="headerlink" title="至此你就可以通过下面的域名来访问自己的博客了"></a>至此你就可以通过下面的域名来访问自己的博客了</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">https://用户名.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四、主题安装"><a href="#四、主题安装" class="headerlink" title="四、主题安装"></a>四、主题安装</h3><p>这里我拿matery主题来举例，其他的应该大同小异</p><h5 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h5><p>解压后，复制文件夹到博客主题文件夹</p><h5 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h5><p>改<code>theme</code>为<code>hexo-theme-matery</code>  &#x2F;&#x2F;主题名（必须跟主题文件夹名字一致）</p><p>改<code>url</code>为<code>http://用户名.github.io</code></p><p>改<code>per_page</code>为<code>6、12、18</code>（6的倍数）</p><p>改<code>language</code>为<code>zh-CN</code></p><h5 id="新建类别、标记、关于页"><a href="#新建类别、标记、关于页" class="headerlink" title="新建类别、标记、关于页"></a>新建类别、标记、关于页</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span>hexo new page <span class="token string">"tags"</span>hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>分别在新页面文件内添加以下内容</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-10 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="上传到Github"><a href="#上传到Github" class="headerlink" title="上传到Github"></a>上传到Github</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo ghexo s//测试hexo d      //上传<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="结束…"><a href="#结束…" class="headerlink" title="结束…"></a>结束…</h5><p>博主很懒</p><p>以后看博主心情更新吧…</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
